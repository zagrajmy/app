schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

# columns and relationships of "ch_festival"
type ch_festival {
  # An array relationship
  ch_helpers(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): [ch_helper!]!

  # An aggregated array relationship
  ch_helpers_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): ch_helper_aggregate!

  # An array relationship
  ch_rooms(
    # distinct select on columns
    distinct_on: [ch_room_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_room_order_by!]

    # filter the rows returned
    where: ch_room_bool_exp
  ): [ch_room!]!

  # An aggregated array relationship
  ch_rooms_aggregate(
    # distinct select on columns
    distinct_on: [ch_room_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_room_order_by!]

    # filter the rows returned
    where: ch_room_bool_exp
  ): ch_room_aggregate!

  # An array relationship
  ch_wait_lists(
    # distinct select on columns
    distinct_on: [ch_wait_list_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_wait_list_order_by!]

    # filter the rows returned
    where: ch_wait_list_bool_exp
  ): [ch_wait_list!]!

  # An aggregated array relationship
  ch_wait_lists_aggregate(
    # distinct select on columns
    distinct_on: [ch_wait_list_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_wait_list_order_by!]

    # filter the rows returned
    where: ch_wait_list_bool_exp
  ): ch_wait_list_aggregate!
  end_time: timestamptz!
  id: Int!
  name: String!

  # An object relationship
  nb_sphere: nb_sphere!
  settings(
    # JSON select path
    path: String
  ): jsonb
  slug: String!
  sphere_id: Int!
  start_proposal: timestamptz!
  start_publication: timestamptz!
  start_time: timestamptz!
}

# aggregated selection of "ch_festival"
type ch_festival_aggregate {
  aggregate: ch_festival_aggregate_fields
  nodes: [ch_festival!]!
}

# aggregate fields of "ch_festival"
type ch_festival_aggregate_fields {
  avg: ch_festival_avg_fields
  count(columns: [ch_festival_select_column!], distinct: Boolean): Int
  max: ch_festival_max_fields
  min: ch_festival_min_fields
  stddev: ch_festival_stddev_fields
  stddev_pop: ch_festival_stddev_pop_fields
  stddev_samp: ch_festival_stddev_samp_fields
  sum: ch_festival_sum_fields
  var_pop: ch_festival_var_pop_fields
  var_samp: ch_festival_var_samp_fields
  variance: ch_festival_variance_fields
}

# order by aggregate values of table "ch_festival"
input ch_festival_aggregate_order_by {
  avg: ch_festival_avg_order_by
  count: order_by
  max: ch_festival_max_order_by
  min: ch_festival_min_order_by
  stddev: ch_festival_stddev_order_by
  stddev_pop: ch_festival_stddev_pop_order_by
  stddev_samp: ch_festival_stddev_samp_order_by
  sum: ch_festival_sum_order_by
  var_pop: ch_festival_var_pop_order_by
  var_samp: ch_festival_var_samp_order_by
  variance: ch_festival_variance_order_by
}

# append existing jsonb value of filtered columns with new jsonb value
input ch_festival_append_input {
  settings: jsonb
}

# input type for inserting array relation for remote table "ch_festival"
input ch_festival_arr_rel_insert_input {
  data: [ch_festival_insert_input!]!
  on_conflict: ch_festival_on_conflict
}

# aggregate avg on columns
type ch_festival_avg_fields {
  id: Float
  sphere_id: Float
}

# order by avg() on columns of table "ch_festival"
input ch_festival_avg_order_by {
  id: order_by
  sphere_id: order_by
}

# Boolean expression to filter rows from the table "ch_festival". All fields are combined with a logical 'AND'.
input ch_festival_bool_exp {
  _and: [ch_festival_bool_exp]
  _not: ch_festival_bool_exp
  _or: [ch_festival_bool_exp]
  ch_helpers: ch_helper_bool_exp
  ch_rooms: ch_room_bool_exp
  ch_wait_lists: ch_wait_list_bool_exp
  end_time: timestamptz_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  nb_sphere: nb_sphere_bool_exp
  settings: jsonb_comparison_exp
  slug: String_comparison_exp
  sphere_id: Int_comparison_exp
  start_proposal: timestamptz_comparison_exp
  start_publication: timestamptz_comparison_exp
  start_time: timestamptz_comparison_exp
}

# unique or primary key constraints on table "ch_festival"
enum ch_festival_constraint {
  # unique or primary key constraint
  ch_festival_pkey
}

# delete the field or element with specified path (for JSON arrays, negative integers count from the end)
input ch_festival_delete_at_path_input {
  settings: [String]
}

# delete the array element with specified index (negative integers count from the
# end). throws an error if top level container is not an array
input ch_festival_delete_elem_input {
  settings: Int
}

# delete key/value pair or string element. key/value pairs are matched based on their key value
input ch_festival_delete_key_input {
  settings: String
}

# input type for incrementing integer column in table "ch_festival"
input ch_festival_inc_input {
  id: Int
  sphere_id: Int
}

# input type for inserting data into table "ch_festival"
input ch_festival_insert_input {
  ch_helpers: ch_helper_arr_rel_insert_input
  ch_rooms: ch_room_arr_rel_insert_input
  ch_wait_lists: ch_wait_list_arr_rel_insert_input
  end_time: timestamptz
  id: Int
  name: String
  nb_sphere: nb_sphere_obj_rel_insert_input
  settings: jsonb
  slug: String
  sphere_id: Int
  start_proposal: timestamptz
  start_publication: timestamptz
  start_time: timestamptz
}

# aggregate max on columns
type ch_festival_max_fields {
  end_time: timestamptz
  id: Int
  name: String
  slug: String
  sphere_id: Int
  start_proposal: timestamptz
  start_publication: timestamptz
  start_time: timestamptz
}

# order by max() on columns of table "ch_festival"
input ch_festival_max_order_by {
  end_time: order_by
  id: order_by
  name: order_by
  slug: order_by
  sphere_id: order_by
  start_proposal: order_by
  start_publication: order_by
  start_time: order_by
}

# aggregate min on columns
type ch_festival_min_fields {
  end_time: timestamptz
  id: Int
  name: String
  slug: String
  sphere_id: Int
  start_proposal: timestamptz
  start_publication: timestamptz
  start_time: timestamptz
}

# order by min() on columns of table "ch_festival"
input ch_festival_min_order_by {
  end_time: order_by
  id: order_by
  name: order_by
  slug: order_by
  sphere_id: order_by
  start_proposal: order_by
  start_publication: order_by
  start_time: order_by
}

# response of any mutation on the table "ch_festival"
type ch_festival_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_festival!]!
}

# input type for inserting object relation for remote table "ch_festival"
input ch_festival_obj_rel_insert_input {
  data: ch_festival_insert_input!
  on_conflict: ch_festival_on_conflict
}

# on conflict condition type for table "ch_festival"
input ch_festival_on_conflict {
  constraint: ch_festival_constraint!
  update_columns: [ch_festival_update_column!]!
  where: ch_festival_bool_exp
}

# ordering options when selecting data from "ch_festival"
input ch_festival_order_by {
  ch_helpers_aggregate: ch_helper_aggregate_order_by
  ch_rooms_aggregate: ch_room_aggregate_order_by
  ch_wait_lists_aggregate: ch_wait_list_aggregate_order_by
  end_time: order_by
  id: order_by
  name: order_by
  nb_sphere: nb_sphere_order_by
  settings: order_by
  slug: order_by
  sphere_id: order_by
  start_proposal: order_by
  start_publication: order_by
  start_time: order_by
}

# primary key columns input for table: "ch_festival"
input ch_festival_pk_columns_input {
  id: Int!
}

# prepend existing jsonb value of filtered columns with new jsonb value
input ch_festival_prepend_input {
  settings: jsonb
}

# select columns of table "ch_festival"
enum ch_festival_select_column {
  # column name
  end_time

  # column name
  id

  # column name
  name

  # column name
  settings

  # column name
  slug

  # column name
  sphere_id

  # column name
  start_proposal

  # column name
  start_publication

  # column name
  start_time
}

# input type for updating data in table "ch_festival"
input ch_festival_set_input {
  end_time: timestamptz
  id: Int
  name: String
  settings: jsonb
  slug: String
  sphere_id: Int
  start_proposal: timestamptz
  start_publication: timestamptz
  start_time: timestamptz
}

# aggregate stddev on columns
type ch_festival_stddev_fields {
  id: Float
  sphere_id: Float
}

# order by stddev() on columns of table "ch_festival"
input ch_festival_stddev_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate stddev_pop on columns
type ch_festival_stddev_pop_fields {
  id: Float
  sphere_id: Float
}

# order by stddev_pop() on columns of table "ch_festival"
input ch_festival_stddev_pop_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate stddev_samp on columns
type ch_festival_stddev_samp_fields {
  id: Float
  sphere_id: Float
}

# order by stddev_samp() on columns of table "ch_festival"
input ch_festival_stddev_samp_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate sum on columns
type ch_festival_sum_fields {
  id: Int
  sphere_id: Int
}

# order by sum() on columns of table "ch_festival"
input ch_festival_sum_order_by {
  id: order_by
  sphere_id: order_by
}

# update columns of table "ch_festival"
enum ch_festival_update_column {
  # column name
  end_time

  # column name
  id

  # column name
  name

  # column name
  settings

  # column name
  slug

  # column name
  sphere_id

  # column name
  start_proposal

  # column name
  start_publication

  # column name
  start_time
}

# aggregate var_pop on columns
type ch_festival_var_pop_fields {
  id: Float
  sphere_id: Float
}

# order by var_pop() on columns of table "ch_festival"
input ch_festival_var_pop_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate var_samp on columns
type ch_festival_var_samp_fields {
  id: Float
  sphere_id: Float
}

# order by var_samp() on columns of table "ch_festival"
input ch_festival_var_samp_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate variance on columns
type ch_festival_variance_fields {
  id: Float
  sphere_id: Float
}

# order by variance() on columns of table "ch_festival"
input ch_festival_variance_order_by {
  id: order_by
  sphere_id: order_by
}

# columns and relationships of "ch_helper"
type ch_helper {
  # An object relationship
  ch_festival: ch_festival!

  # An array relationship
  ch_helper_time_slots(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): [ch_helper_time_slots!]!

  # An aggregated array relationship
  ch_helper_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): ch_helper_time_slots_aggregate!

  # An array relationship
  ch_time_tables(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): [ch_time_table!]!

  # An aggregated array relationship
  ch_time_tables_aggregate(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): ch_time_table_aggregate!

  # An object relationship
  cr_user: cr_user!
  festival_id: Int!
  id: Int!
  user_id: uuid!
}

# aggregated selection of "ch_helper"
type ch_helper_aggregate {
  aggregate: ch_helper_aggregate_fields
  nodes: [ch_helper!]!
}

# aggregate fields of "ch_helper"
type ch_helper_aggregate_fields {
  avg: ch_helper_avg_fields
  count(columns: [ch_helper_select_column!], distinct: Boolean): Int
  max: ch_helper_max_fields
  min: ch_helper_min_fields
  stddev: ch_helper_stddev_fields
  stddev_pop: ch_helper_stddev_pop_fields
  stddev_samp: ch_helper_stddev_samp_fields
  sum: ch_helper_sum_fields
  var_pop: ch_helper_var_pop_fields
  var_samp: ch_helper_var_samp_fields
  variance: ch_helper_variance_fields
}

# order by aggregate values of table "ch_helper"
input ch_helper_aggregate_order_by {
  avg: ch_helper_avg_order_by
  count: order_by
  max: ch_helper_max_order_by
  min: ch_helper_min_order_by
  stddev: ch_helper_stddev_order_by
  stddev_pop: ch_helper_stddev_pop_order_by
  stddev_samp: ch_helper_stddev_samp_order_by
  sum: ch_helper_sum_order_by
  var_pop: ch_helper_var_pop_order_by
  var_samp: ch_helper_var_samp_order_by
  variance: ch_helper_variance_order_by
}

# input type for inserting array relation for remote table "ch_helper"
input ch_helper_arr_rel_insert_input {
  data: [ch_helper_insert_input!]!
  on_conflict: ch_helper_on_conflict
}

# aggregate avg on columns
type ch_helper_avg_fields {
  festival_id: Float
  id: Float
}

# order by avg() on columns of table "ch_helper"
input ch_helper_avg_order_by {
  festival_id: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "ch_helper". All fields are combined with a logical 'AND'.
input ch_helper_bool_exp {
  _and: [ch_helper_bool_exp]
  _not: ch_helper_bool_exp
  _or: [ch_helper_bool_exp]
  ch_festival: ch_festival_bool_exp
  ch_helper_time_slots: ch_helper_time_slots_bool_exp
  ch_time_tables: ch_time_table_bool_exp
  cr_user: cr_user_bool_exp
  festival_id: Int_comparison_exp
  id: Int_comparison_exp
  user_id: uuid_comparison_exp
}

# unique or primary key constraints on table "ch_helper"
enum ch_helper_constraint {
  # unique or primary key constraint
  ch_helper_pkey
}

# input type for incrementing integer column in table "ch_helper"
input ch_helper_inc_input {
  festival_id: Int
  id: Int
}

# input type for inserting data into table "ch_helper"
input ch_helper_insert_input {
  ch_festival: ch_festival_obj_rel_insert_input
  ch_helper_time_slots: ch_helper_time_slots_arr_rel_insert_input
  ch_time_tables: ch_time_table_arr_rel_insert_input
  cr_user: cr_user_obj_rel_insert_input
  festival_id: Int
  id: Int
  user_id: uuid
}

# aggregate max on columns
type ch_helper_max_fields {
  festival_id: Int
  id: Int
  user_id: uuid
}

# order by max() on columns of table "ch_helper"
input ch_helper_max_order_by {
  festival_id: order_by
  id: order_by
  user_id: order_by
}

# aggregate min on columns
type ch_helper_min_fields {
  festival_id: Int
  id: Int
  user_id: uuid
}

# order by min() on columns of table "ch_helper"
input ch_helper_min_order_by {
  festival_id: order_by
  id: order_by
  user_id: order_by
}

# response of any mutation on the table "ch_helper"
type ch_helper_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_helper!]!
}

# input type for inserting object relation for remote table "ch_helper"
input ch_helper_obj_rel_insert_input {
  data: ch_helper_insert_input!
  on_conflict: ch_helper_on_conflict
}

# on conflict condition type for table "ch_helper"
input ch_helper_on_conflict {
  constraint: ch_helper_constraint!
  update_columns: [ch_helper_update_column!]!
  where: ch_helper_bool_exp
}

# ordering options when selecting data from "ch_helper"
input ch_helper_order_by {
  ch_festival: ch_festival_order_by
  ch_helper_time_slots_aggregate: ch_helper_time_slots_aggregate_order_by
  ch_time_tables_aggregate: ch_time_table_aggregate_order_by
  cr_user: cr_user_order_by
  festival_id: order_by
  id: order_by
  user_id: order_by
}

# primary key columns input for table: "ch_helper"
input ch_helper_pk_columns_input {
  id: Int!
}

# select columns of table "ch_helper"
enum ch_helper_select_column {
  # column name
  festival_id

  # column name
  id

  # column name
  user_id
}

# input type for updating data in table "ch_helper"
input ch_helper_set_input {
  festival_id: Int
  id: Int
  user_id: uuid
}

# aggregate stddev on columns
type ch_helper_stddev_fields {
  festival_id: Float
  id: Float
}

# order by stddev() on columns of table "ch_helper"
input ch_helper_stddev_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type ch_helper_stddev_pop_fields {
  festival_id: Float
  id: Float
}

# order by stddev_pop() on columns of table "ch_helper"
input ch_helper_stddev_pop_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type ch_helper_stddev_samp_fields {
  festival_id: Float
  id: Float
}

# order by stddev_samp() on columns of table "ch_helper"
input ch_helper_stddev_samp_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate sum on columns
type ch_helper_sum_fields {
  festival_id: Int
  id: Int
}

# order by sum() on columns of table "ch_helper"
input ch_helper_sum_order_by {
  festival_id: order_by
  id: order_by
}

# columns and relationships of "ch_helper_time_slots"
type ch_helper_time_slots {
  # An object relationship
  ch_helper: ch_helper!

  # An object relationship
  ch_time_slot: ch_time_slot!
  helper_id: Int!
  id: Int!
  timeslot_id: Int!
}

# aggregated selection of "ch_helper_time_slots"
type ch_helper_time_slots_aggregate {
  aggregate: ch_helper_time_slots_aggregate_fields
  nodes: [ch_helper_time_slots!]!
}

# aggregate fields of "ch_helper_time_slots"
type ch_helper_time_slots_aggregate_fields {
  avg: ch_helper_time_slots_avg_fields
  count(columns: [ch_helper_time_slots_select_column!], distinct: Boolean): Int
  max: ch_helper_time_slots_max_fields
  min: ch_helper_time_slots_min_fields
  stddev: ch_helper_time_slots_stddev_fields
  stddev_pop: ch_helper_time_slots_stddev_pop_fields
  stddev_samp: ch_helper_time_slots_stddev_samp_fields
  sum: ch_helper_time_slots_sum_fields
  var_pop: ch_helper_time_slots_var_pop_fields
  var_samp: ch_helper_time_slots_var_samp_fields
  variance: ch_helper_time_slots_variance_fields
}

# order by aggregate values of table "ch_helper_time_slots"
input ch_helper_time_slots_aggregate_order_by {
  avg: ch_helper_time_slots_avg_order_by
  count: order_by
  max: ch_helper_time_slots_max_order_by
  min: ch_helper_time_slots_min_order_by
  stddev: ch_helper_time_slots_stddev_order_by
  stddev_pop: ch_helper_time_slots_stddev_pop_order_by
  stddev_samp: ch_helper_time_slots_stddev_samp_order_by
  sum: ch_helper_time_slots_sum_order_by
  var_pop: ch_helper_time_slots_var_pop_order_by
  var_samp: ch_helper_time_slots_var_samp_order_by
  variance: ch_helper_time_slots_variance_order_by
}

# input type for inserting array relation for remote table "ch_helper_time_slots"
input ch_helper_time_slots_arr_rel_insert_input {
  data: [ch_helper_time_slots_insert_input!]!
  on_conflict: ch_helper_time_slots_on_conflict
}

# aggregate avg on columns
type ch_helper_time_slots_avg_fields {
  helper_id: Float
  id: Float
  timeslot_id: Float
}

# order by avg() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_avg_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# Boolean expression to filter rows from the table "ch_helper_time_slots". All fields are combined with a logical 'AND'.
input ch_helper_time_slots_bool_exp {
  _and: [ch_helper_time_slots_bool_exp]
  _not: ch_helper_time_slots_bool_exp
  _or: [ch_helper_time_slots_bool_exp]
  ch_helper: ch_helper_bool_exp
  ch_time_slot: ch_time_slot_bool_exp
  helper_id: Int_comparison_exp
  id: Int_comparison_exp
  timeslot_id: Int_comparison_exp
}

# unique or primary key constraints on table "ch_helper_time_slots"
enum ch_helper_time_slots_constraint {
  # unique or primary key constraint
  ch_helper_time_slots_helper_id_timeslot_id_d9474b92_uniq

  # unique or primary key constraint
  ch_helper_time_slots_pkey
}

# input type for incrementing integer column in table "ch_helper_time_slots"
input ch_helper_time_slots_inc_input {
  helper_id: Int
  id: Int
  timeslot_id: Int
}

# input type for inserting data into table "ch_helper_time_slots"
input ch_helper_time_slots_insert_input {
  ch_helper: ch_helper_obj_rel_insert_input
  ch_time_slot: ch_time_slot_obj_rel_insert_input
  helper_id: Int
  id: Int
  timeslot_id: Int
}

# aggregate max on columns
type ch_helper_time_slots_max_fields {
  helper_id: Int
  id: Int
  timeslot_id: Int
}

# order by max() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_max_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# aggregate min on columns
type ch_helper_time_slots_min_fields {
  helper_id: Int
  id: Int
  timeslot_id: Int
}

# order by min() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_min_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# response of any mutation on the table "ch_helper_time_slots"
type ch_helper_time_slots_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_helper_time_slots!]!
}

# input type for inserting object relation for remote table "ch_helper_time_slots"
input ch_helper_time_slots_obj_rel_insert_input {
  data: ch_helper_time_slots_insert_input!
  on_conflict: ch_helper_time_slots_on_conflict
}

# on conflict condition type for table "ch_helper_time_slots"
input ch_helper_time_slots_on_conflict {
  constraint: ch_helper_time_slots_constraint!
  update_columns: [ch_helper_time_slots_update_column!]!
  where: ch_helper_time_slots_bool_exp
}

# ordering options when selecting data from "ch_helper_time_slots"
input ch_helper_time_slots_order_by {
  ch_helper: ch_helper_order_by
  ch_time_slot: ch_time_slot_order_by
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# primary key columns input for table: "ch_helper_time_slots"
input ch_helper_time_slots_pk_columns_input {
  id: Int!
}

# select columns of table "ch_helper_time_slots"
enum ch_helper_time_slots_select_column {
  # column name
  helper_id

  # column name
  id

  # column name
  timeslot_id
}

# input type for updating data in table "ch_helper_time_slots"
input ch_helper_time_slots_set_input {
  helper_id: Int
  id: Int
  timeslot_id: Int
}

# aggregate stddev on columns
type ch_helper_time_slots_stddev_fields {
  helper_id: Float
  id: Float
  timeslot_id: Float
}

# order by stddev() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_stddev_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# aggregate stddev_pop on columns
type ch_helper_time_slots_stddev_pop_fields {
  helper_id: Float
  id: Float
  timeslot_id: Float
}

# order by stddev_pop() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_stddev_pop_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# aggregate stddev_samp on columns
type ch_helper_time_slots_stddev_samp_fields {
  helper_id: Float
  id: Float
  timeslot_id: Float
}

# order by stddev_samp() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_stddev_samp_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# aggregate sum on columns
type ch_helper_time_slots_sum_fields {
  helper_id: Int
  id: Int
  timeslot_id: Int
}

# order by sum() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_sum_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# update columns of table "ch_helper_time_slots"
enum ch_helper_time_slots_update_column {
  # column name
  helper_id

  # column name
  id

  # column name
  timeslot_id
}

# aggregate var_pop on columns
type ch_helper_time_slots_var_pop_fields {
  helper_id: Float
  id: Float
  timeslot_id: Float
}

# order by var_pop() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_var_pop_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# aggregate var_samp on columns
type ch_helper_time_slots_var_samp_fields {
  helper_id: Float
  id: Float
  timeslot_id: Float
}

# order by var_samp() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_var_samp_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# aggregate variance on columns
type ch_helper_time_slots_variance_fields {
  helper_id: Float
  id: Float
  timeslot_id: Float
}

# order by variance() on columns of table "ch_helper_time_slots"
input ch_helper_time_slots_variance_order_by {
  helper_id: order_by
  id: order_by
  timeslot_id: order_by
}

# update columns of table "ch_helper"
enum ch_helper_update_column {
  # column name
  festival_id

  # column name
  id

  # column name
  user_id
}

# aggregate var_pop on columns
type ch_helper_var_pop_fields {
  festival_id: Float
  id: Float
}

# order by var_pop() on columns of table "ch_helper"
input ch_helper_var_pop_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate var_samp on columns
type ch_helper_var_samp_fields {
  festival_id: Float
  id: Float
}

# order by var_samp() on columns of table "ch_helper"
input ch_helper_var_samp_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate variance on columns
type ch_helper_variance_fields {
  festival_id: Float
  id: Float
}

# order by variance() on columns of table "ch_helper"
input ch_helper_variance_order_by {
  festival_id: order_by
  id: order_by
}

# columns and relationships of "ch_proposal"
type ch_proposal {
  # An array relationship
  ch_proposal_time_slots(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): [ch_proposal_time_slots!]!

  # An aggregated array relationship
  ch_proposal_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): ch_proposal_time_slots_aggregate!

  # An object relationship
  ch_wait_list: ch_wait_list!
  city: String!
  club: String!

  # An object relationship
  cr_user: cr_user!
  description: String!
  id: Int!
  needs: String!
  other_contact: String!
  other_data: String!
  phone: String!
  title: String!
  user_id: uuid!
  waitlist_id: Int!
}

# aggregated selection of "ch_proposal"
type ch_proposal_aggregate {
  aggregate: ch_proposal_aggregate_fields
  nodes: [ch_proposal!]!
}

# aggregate fields of "ch_proposal"
type ch_proposal_aggregate_fields {
  avg: ch_proposal_avg_fields
  count(columns: [ch_proposal_select_column!], distinct: Boolean): Int
  max: ch_proposal_max_fields
  min: ch_proposal_min_fields
  stddev: ch_proposal_stddev_fields
  stddev_pop: ch_proposal_stddev_pop_fields
  stddev_samp: ch_proposal_stddev_samp_fields
  sum: ch_proposal_sum_fields
  var_pop: ch_proposal_var_pop_fields
  var_samp: ch_proposal_var_samp_fields
  variance: ch_proposal_variance_fields
}

# order by aggregate values of table "ch_proposal"
input ch_proposal_aggregate_order_by {
  avg: ch_proposal_avg_order_by
  count: order_by
  max: ch_proposal_max_order_by
  min: ch_proposal_min_order_by
  stddev: ch_proposal_stddev_order_by
  stddev_pop: ch_proposal_stddev_pop_order_by
  stddev_samp: ch_proposal_stddev_samp_order_by
  sum: ch_proposal_sum_order_by
  var_pop: ch_proposal_var_pop_order_by
  var_samp: ch_proposal_var_samp_order_by
  variance: ch_proposal_variance_order_by
}

# input type for inserting array relation for remote table "ch_proposal"
input ch_proposal_arr_rel_insert_input {
  data: [ch_proposal_insert_input!]!
  on_conflict: ch_proposal_on_conflict
}

# aggregate avg on columns
type ch_proposal_avg_fields {
  id: Float
  waitlist_id: Float
}

# order by avg() on columns of table "ch_proposal"
input ch_proposal_avg_order_by {
  id: order_by
  waitlist_id: order_by
}

# Boolean expression to filter rows from the table "ch_proposal". All fields are combined with a logical 'AND'.
input ch_proposal_bool_exp {
  _and: [ch_proposal_bool_exp]
  _not: ch_proposal_bool_exp
  _or: [ch_proposal_bool_exp]
  ch_proposal_time_slots: ch_proposal_time_slots_bool_exp
  ch_wait_list: ch_wait_list_bool_exp
  city: String_comparison_exp
  club: String_comparison_exp
  cr_user: cr_user_bool_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  needs: String_comparison_exp
  other_contact: String_comparison_exp
  other_data: String_comparison_exp
  phone: String_comparison_exp
  title: String_comparison_exp
  user_id: uuid_comparison_exp
  waitlist_id: Int_comparison_exp
}

# unique or primary key constraints on table "ch_proposal"
enum ch_proposal_constraint {
  # unique or primary key constraint
  ch_proposal_pkey
}

# input type for incrementing integer column in table "ch_proposal"
input ch_proposal_inc_input {
  id: Int
  waitlist_id: Int
}

# input type for inserting data into table "ch_proposal"
input ch_proposal_insert_input {
  ch_proposal_time_slots: ch_proposal_time_slots_arr_rel_insert_input
  ch_wait_list: ch_wait_list_obj_rel_insert_input
  city: String
  club: String
  cr_user: cr_user_obj_rel_insert_input
  description: String
  id: Int
  needs: String
  other_contact: String
  other_data: String
  phone: String
  title: String
  user_id: uuid
  waitlist_id: Int
}

# aggregate max on columns
type ch_proposal_max_fields {
  city: String
  club: String
  description: String
  id: Int
  needs: String
  other_contact: String
  other_data: String
  phone: String
  title: String
  user_id: uuid
  waitlist_id: Int
}

# order by max() on columns of table "ch_proposal"
input ch_proposal_max_order_by {
  city: order_by
  club: order_by
  description: order_by
  id: order_by
  needs: order_by
  other_contact: order_by
  other_data: order_by
  phone: order_by
  title: order_by
  user_id: order_by
  waitlist_id: order_by
}

# aggregate min on columns
type ch_proposal_min_fields {
  city: String
  club: String
  description: String
  id: Int
  needs: String
  other_contact: String
  other_data: String
  phone: String
  title: String
  user_id: uuid
  waitlist_id: Int
}

# order by min() on columns of table "ch_proposal"
input ch_proposal_min_order_by {
  city: order_by
  club: order_by
  description: order_by
  id: order_by
  needs: order_by
  other_contact: order_by
  other_data: order_by
  phone: order_by
  title: order_by
  user_id: order_by
  waitlist_id: order_by
}

# response of any mutation on the table "ch_proposal"
type ch_proposal_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_proposal!]!
}

# input type for inserting object relation for remote table "ch_proposal"
input ch_proposal_obj_rel_insert_input {
  data: ch_proposal_insert_input!
  on_conflict: ch_proposal_on_conflict
}

# on conflict condition type for table "ch_proposal"
input ch_proposal_on_conflict {
  constraint: ch_proposal_constraint!
  update_columns: [ch_proposal_update_column!]!
  where: ch_proposal_bool_exp
}

# ordering options when selecting data from "ch_proposal"
input ch_proposal_order_by {
  ch_proposal_time_slots_aggregate: ch_proposal_time_slots_aggregate_order_by
  ch_wait_list: ch_wait_list_order_by
  city: order_by
  club: order_by
  cr_user: cr_user_order_by
  description: order_by
  id: order_by
  needs: order_by
  other_contact: order_by
  other_data: order_by
  phone: order_by
  title: order_by
  user_id: order_by
  waitlist_id: order_by
}

# primary key columns input for table: "ch_proposal"
input ch_proposal_pk_columns_input {
  id: Int!
}

# select columns of table "ch_proposal"
enum ch_proposal_select_column {
  # column name
  city

  # column name
  club

  # column name
  description

  # column name
  id

  # column name
  needs

  # column name
  other_contact

  # column name
  other_data

  # column name
  phone

  # column name
  title

  # column name
  user_id

  # column name
  waitlist_id
}

# input type for updating data in table "ch_proposal"
input ch_proposal_set_input {
  city: String
  club: String
  description: String
  id: Int
  needs: String
  other_contact: String
  other_data: String
  phone: String
  title: String
  user_id: uuid
  waitlist_id: Int
}

# aggregate stddev on columns
type ch_proposal_stddev_fields {
  id: Float
  waitlist_id: Float
}

# order by stddev() on columns of table "ch_proposal"
input ch_proposal_stddev_order_by {
  id: order_by
  waitlist_id: order_by
}

# aggregate stddev_pop on columns
type ch_proposal_stddev_pop_fields {
  id: Float
  waitlist_id: Float
}

# order by stddev_pop() on columns of table "ch_proposal"
input ch_proposal_stddev_pop_order_by {
  id: order_by
  waitlist_id: order_by
}

# aggregate stddev_samp on columns
type ch_proposal_stddev_samp_fields {
  id: Float
  waitlist_id: Float
}

# order by stddev_samp() on columns of table "ch_proposal"
input ch_proposal_stddev_samp_order_by {
  id: order_by
  waitlist_id: order_by
}

# aggregate sum on columns
type ch_proposal_sum_fields {
  id: Int
  waitlist_id: Int
}

# order by sum() on columns of table "ch_proposal"
input ch_proposal_sum_order_by {
  id: order_by
  waitlist_id: order_by
}

# columns and relationships of "ch_proposal_time_slots"
type ch_proposal_time_slots {
  # An object relationship
  ch_proposal: ch_proposal!

  # An object relationship
  ch_time_slot: ch_time_slot!
  id: Int!
  proposal_id: Int!
  timeslot_id: Int!
}

# aggregated selection of "ch_proposal_time_slots"
type ch_proposal_time_slots_aggregate {
  aggregate: ch_proposal_time_slots_aggregate_fields
  nodes: [ch_proposal_time_slots!]!
}

# aggregate fields of "ch_proposal_time_slots"
type ch_proposal_time_slots_aggregate_fields {
  avg: ch_proposal_time_slots_avg_fields
  count(
    columns: [ch_proposal_time_slots_select_column!]
    distinct: Boolean
  ): Int
  max: ch_proposal_time_slots_max_fields
  min: ch_proposal_time_slots_min_fields
  stddev: ch_proposal_time_slots_stddev_fields
  stddev_pop: ch_proposal_time_slots_stddev_pop_fields
  stddev_samp: ch_proposal_time_slots_stddev_samp_fields
  sum: ch_proposal_time_slots_sum_fields
  var_pop: ch_proposal_time_slots_var_pop_fields
  var_samp: ch_proposal_time_slots_var_samp_fields
  variance: ch_proposal_time_slots_variance_fields
}

# order by aggregate values of table "ch_proposal_time_slots"
input ch_proposal_time_slots_aggregate_order_by {
  avg: ch_proposal_time_slots_avg_order_by
  count: order_by
  max: ch_proposal_time_slots_max_order_by
  min: ch_proposal_time_slots_min_order_by
  stddev: ch_proposal_time_slots_stddev_order_by
  stddev_pop: ch_proposal_time_slots_stddev_pop_order_by
  stddev_samp: ch_proposal_time_slots_stddev_samp_order_by
  sum: ch_proposal_time_slots_sum_order_by
  var_pop: ch_proposal_time_slots_var_pop_order_by
  var_samp: ch_proposal_time_slots_var_samp_order_by
  variance: ch_proposal_time_slots_variance_order_by
}

# input type for inserting array relation for remote table "ch_proposal_time_slots"
input ch_proposal_time_slots_arr_rel_insert_input {
  data: [ch_proposal_time_slots_insert_input!]!
  on_conflict: ch_proposal_time_slots_on_conflict
}

# aggregate avg on columns
type ch_proposal_time_slots_avg_fields {
  id: Float
  proposal_id: Float
  timeslot_id: Float
}

# order by avg() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_avg_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# Boolean expression to filter rows from the table "ch_proposal_time_slots". All fields are combined with a logical 'AND'.
input ch_proposal_time_slots_bool_exp {
  _and: [ch_proposal_time_slots_bool_exp]
  _not: ch_proposal_time_slots_bool_exp
  _or: [ch_proposal_time_slots_bool_exp]
  ch_proposal: ch_proposal_bool_exp
  ch_time_slot: ch_time_slot_bool_exp
  id: Int_comparison_exp
  proposal_id: Int_comparison_exp
  timeslot_id: Int_comparison_exp
}

# unique or primary key constraints on table "ch_proposal_time_slots"
enum ch_proposal_time_slots_constraint {
  # unique or primary key constraint
  ch_proposal_time_slots_pkey

  # unique or primary key constraint
  ch_proposal_time_slots_proposal_id_timeslot_id_9e97c03e_uniq
}

# input type for incrementing integer column in table "ch_proposal_time_slots"
input ch_proposal_time_slots_inc_input {
  id: Int
  proposal_id: Int
  timeslot_id: Int
}

# input type for inserting data into table "ch_proposal_time_slots"
input ch_proposal_time_slots_insert_input {
  ch_proposal: ch_proposal_obj_rel_insert_input
  ch_time_slot: ch_time_slot_obj_rel_insert_input
  id: Int
  proposal_id: Int
  timeslot_id: Int
}

# aggregate max on columns
type ch_proposal_time_slots_max_fields {
  id: Int
  proposal_id: Int
  timeslot_id: Int
}

# order by max() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_max_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# aggregate min on columns
type ch_proposal_time_slots_min_fields {
  id: Int
  proposal_id: Int
  timeslot_id: Int
}

# order by min() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_min_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# response of any mutation on the table "ch_proposal_time_slots"
type ch_proposal_time_slots_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_proposal_time_slots!]!
}

# input type for inserting object relation for remote table "ch_proposal_time_slots"
input ch_proposal_time_slots_obj_rel_insert_input {
  data: ch_proposal_time_slots_insert_input!
  on_conflict: ch_proposal_time_slots_on_conflict
}

# on conflict condition type for table "ch_proposal_time_slots"
input ch_proposal_time_slots_on_conflict {
  constraint: ch_proposal_time_slots_constraint!
  update_columns: [ch_proposal_time_slots_update_column!]!
  where: ch_proposal_time_slots_bool_exp
}

# ordering options when selecting data from "ch_proposal_time_slots"
input ch_proposal_time_slots_order_by {
  ch_proposal: ch_proposal_order_by
  ch_time_slot: ch_time_slot_order_by
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# primary key columns input for table: "ch_proposal_time_slots"
input ch_proposal_time_slots_pk_columns_input {
  id: Int!
}

# select columns of table "ch_proposal_time_slots"
enum ch_proposal_time_slots_select_column {
  # column name
  id

  # column name
  proposal_id

  # column name
  timeslot_id
}

# input type for updating data in table "ch_proposal_time_slots"
input ch_proposal_time_slots_set_input {
  id: Int
  proposal_id: Int
  timeslot_id: Int
}

# aggregate stddev on columns
type ch_proposal_time_slots_stddev_fields {
  id: Float
  proposal_id: Float
  timeslot_id: Float
}

# order by stddev() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_stddev_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# aggregate stddev_pop on columns
type ch_proposal_time_slots_stddev_pop_fields {
  id: Float
  proposal_id: Float
  timeslot_id: Float
}

# order by stddev_pop() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_stddev_pop_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# aggregate stddev_samp on columns
type ch_proposal_time_slots_stddev_samp_fields {
  id: Float
  proposal_id: Float
  timeslot_id: Float
}

# order by stddev_samp() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_stddev_samp_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# aggregate sum on columns
type ch_proposal_time_slots_sum_fields {
  id: Int
  proposal_id: Int
  timeslot_id: Int
}

# order by sum() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_sum_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# update columns of table "ch_proposal_time_slots"
enum ch_proposal_time_slots_update_column {
  # column name
  id

  # column name
  proposal_id

  # column name
  timeslot_id
}

# aggregate var_pop on columns
type ch_proposal_time_slots_var_pop_fields {
  id: Float
  proposal_id: Float
  timeslot_id: Float
}

# order by var_pop() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_var_pop_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# aggregate var_samp on columns
type ch_proposal_time_slots_var_samp_fields {
  id: Float
  proposal_id: Float
  timeslot_id: Float
}

# order by var_samp() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_var_samp_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# aggregate variance on columns
type ch_proposal_time_slots_variance_fields {
  id: Float
  proposal_id: Float
  timeslot_id: Float
}

# order by variance() on columns of table "ch_proposal_time_slots"
input ch_proposal_time_slots_variance_order_by {
  id: order_by
  proposal_id: order_by
  timeslot_id: order_by
}

# update columns of table "ch_proposal"
enum ch_proposal_update_column {
  # column name
  city

  # column name
  club

  # column name
  description

  # column name
  id

  # column name
  needs

  # column name
  other_contact

  # column name
  other_data

  # column name
  phone

  # column name
  title

  # column name
  user_id

  # column name
  waitlist_id
}

# aggregate var_pop on columns
type ch_proposal_var_pop_fields {
  id: Float
  waitlist_id: Float
}

# order by var_pop() on columns of table "ch_proposal"
input ch_proposal_var_pop_order_by {
  id: order_by
  waitlist_id: order_by
}

# aggregate var_samp on columns
type ch_proposal_var_samp_fields {
  id: Float
  waitlist_id: Float
}

# order by var_samp() on columns of table "ch_proposal"
input ch_proposal_var_samp_order_by {
  id: order_by
  waitlist_id: order_by
}

# aggregate variance on columns
type ch_proposal_variance_fields {
  id: Float
  waitlist_id: Float
}

# order by variance() on columns of table "ch_proposal"
input ch_proposal_variance_order_by {
  id: order_by
  waitlist_id: order_by
}

# columns and relationships of "ch_room"
type ch_room {
  # An object relationship
  ch_festival: ch_festival!

  # An array relationship
  ch_time_tables(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): [ch_time_table!]!

  # An aggregated array relationship
  ch_time_tables_aggregate(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): ch_time_table_aggregate!
  festival_id: Int!
  id: Int!
  name: String!
}

# aggregated selection of "ch_room"
type ch_room_aggregate {
  aggregate: ch_room_aggregate_fields
  nodes: [ch_room!]!
}

# aggregate fields of "ch_room"
type ch_room_aggregate_fields {
  avg: ch_room_avg_fields
  count(columns: [ch_room_select_column!], distinct: Boolean): Int
  max: ch_room_max_fields
  min: ch_room_min_fields
  stddev: ch_room_stddev_fields
  stddev_pop: ch_room_stddev_pop_fields
  stddev_samp: ch_room_stddev_samp_fields
  sum: ch_room_sum_fields
  var_pop: ch_room_var_pop_fields
  var_samp: ch_room_var_samp_fields
  variance: ch_room_variance_fields
}

# order by aggregate values of table "ch_room"
input ch_room_aggregate_order_by {
  avg: ch_room_avg_order_by
  count: order_by
  max: ch_room_max_order_by
  min: ch_room_min_order_by
  stddev: ch_room_stddev_order_by
  stddev_pop: ch_room_stddev_pop_order_by
  stddev_samp: ch_room_stddev_samp_order_by
  sum: ch_room_sum_order_by
  var_pop: ch_room_var_pop_order_by
  var_samp: ch_room_var_samp_order_by
  variance: ch_room_variance_order_by
}

# input type for inserting array relation for remote table "ch_room"
input ch_room_arr_rel_insert_input {
  data: [ch_room_insert_input!]!
  on_conflict: ch_room_on_conflict
}

# aggregate avg on columns
type ch_room_avg_fields {
  festival_id: Float
  id: Float
}

# order by avg() on columns of table "ch_room"
input ch_room_avg_order_by {
  festival_id: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "ch_room". All fields are combined with a logical 'AND'.
input ch_room_bool_exp {
  _and: [ch_room_bool_exp]
  _not: ch_room_bool_exp
  _or: [ch_room_bool_exp]
  ch_festival: ch_festival_bool_exp
  ch_time_tables: ch_time_table_bool_exp
  festival_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "ch_room"
enum ch_room_constraint {
  # unique or primary key constraint
  ch_room_pkey
}

# input type for incrementing integer column in table "ch_room"
input ch_room_inc_input {
  festival_id: Int
  id: Int
}

# input type for inserting data into table "ch_room"
input ch_room_insert_input {
  ch_festival: ch_festival_obj_rel_insert_input
  ch_time_tables: ch_time_table_arr_rel_insert_input
  festival_id: Int
  id: Int
  name: String
}

# aggregate max on columns
type ch_room_max_fields {
  festival_id: Int
  id: Int
  name: String
}

# order by max() on columns of table "ch_room"
input ch_room_max_order_by {
  festival_id: order_by
  id: order_by
  name: order_by
}

# aggregate min on columns
type ch_room_min_fields {
  festival_id: Int
  id: Int
  name: String
}

# order by min() on columns of table "ch_room"
input ch_room_min_order_by {
  festival_id: order_by
  id: order_by
  name: order_by
}

# response of any mutation on the table "ch_room"
type ch_room_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_room!]!
}

# input type for inserting object relation for remote table "ch_room"
input ch_room_obj_rel_insert_input {
  data: ch_room_insert_input!
  on_conflict: ch_room_on_conflict
}

# on conflict condition type for table "ch_room"
input ch_room_on_conflict {
  constraint: ch_room_constraint!
  update_columns: [ch_room_update_column!]!
  where: ch_room_bool_exp
}

# ordering options when selecting data from "ch_room"
input ch_room_order_by {
  ch_festival: ch_festival_order_by
  ch_time_tables_aggregate: ch_time_table_aggregate_order_by
  festival_id: order_by
  id: order_by
  name: order_by
}

# primary key columns input for table: "ch_room"
input ch_room_pk_columns_input {
  id: Int!
}

# select columns of table "ch_room"
enum ch_room_select_column {
  # column name
  festival_id

  # column name
  id

  # column name
  name
}

# input type for updating data in table "ch_room"
input ch_room_set_input {
  festival_id: Int
  id: Int
  name: String
}

# aggregate stddev on columns
type ch_room_stddev_fields {
  festival_id: Float
  id: Float
}

# order by stddev() on columns of table "ch_room"
input ch_room_stddev_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type ch_room_stddev_pop_fields {
  festival_id: Float
  id: Float
}

# order by stddev_pop() on columns of table "ch_room"
input ch_room_stddev_pop_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type ch_room_stddev_samp_fields {
  festival_id: Float
  id: Float
}

# order by stddev_samp() on columns of table "ch_room"
input ch_room_stddev_samp_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate sum on columns
type ch_room_sum_fields {
  festival_id: Int
  id: Int
}

# order by sum() on columns of table "ch_room"
input ch_room_sum_order_by {
  festival_id: order_by
  id: order_by
}

# update columns of table "ch_room"
enum ch_room_update_column {
  # column name
  festival_id

  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type ch_room_var_pop_fields {
  festival_id: Float
  id: Float
}

# order by var_pop() on columns of table "ch_room"
input ch_room_var_pop_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate var_samp on columns
type ch_room_var_samp_fields {
  festival_id: Float
  id: Float
}

# order by var_samp() on columns of table "ch_room"
input ch_room_var_samp_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate variance on columns
type ch_room_variance_fields {
  festival_id: Float
  id: Float
}

# order by variance() on columns of table "ch_room"
input ch_room_variance_order_by {
  festival_id: order_by
  id: order_by
}

# columns and relationships of "ch_time_slot"
type ch_time_slot {
  # An array relationship
  ch_helper_time_slots(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): [ch_helper_time_slots!]!

  # An aggregated array relationship
  ch_helper_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): ch_helper_time_slots_aggregate!

  # An array relationship
  ch_proposal_time_slots(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): [ch_proposal_time_slots!]!

  # An aggregated array relationship
  ch_proposal_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): ch_proposal_time_slots_aggregate!
  end_time: timestamptz!
  id: Int!
  start_time: timestamptz!
}

# aggregated selection of "ch_time_slot"
type ch_time_slot_aggregate {
  aggregate: ch_time_slot_aggregate_fields
  nodes: [ch_time_slot!]!
}

# aggregate fields of "ch_time_slot"
type ch_time_slot_aggregate_fields {
  avg: ch_time_slot_avg_fields
  count(columns: [ch_time_slot_select_column!], distinct: Boolean): Int
  max: ch_time_slot_max_fields
  min: ch_time_slot_min_fields
  stddev: ch_time_slot_stddev_fields
  stddev_pop: ch_time_slot_stddev_pop_fields
  stddev_samp: ch_time_slot_stddev_samp_fields
  sum: ch_time_slot_sum_fields
  var_pop: ch_time_slot_var_pop_fields
  var_samp: ch_time_slot_var_samp_fields
  variance: ch_time_slot_variance_fields
}

# order by aggregate values of table "ch_time_slot"
input ch_time_slot_aggregate_order_by {
  avg: ch_time_slot_avg_order_by
  count: order_by
  max: ch_time_slot_max_order_by
  min: ch_time_slot_min_order_by
  stddev: ch_time_slot_stddev_order_by
  stddev_pop: ch_time_slot_stddev_pop_order_by
  stddev_samp: ch_time_slot_stddev_samp_order_by
  sum: ch_time_slot_sum_order_by
  var_pop: ch_time_slot_var_pop_order_by
  var_samp: ch_time_slot_var_samp_order_by
  variance: ch_time_slot_variance_order_by
}

# input type for inserting array relation for remote table "ch_time_slot"
input ch_time_slot_arr_rel_insert_input {
  data: [ch_time_slot_insert_input!]!
  on_conflict: ch_time_slot_on_conflict
}

# aggregate avg on columns
type ch_time_slot_avg_fields {
  id: Float
}

# order by avg() on columns of table "ch_time_slot"
input ch_time_slot_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "ch_time_slot". All fields are combined with a logical 'AND'.
input ch_time_slot_bool_exp {
  _and: [ch_time_slot_bool_exp]
  _not: ch_time_slot_bool_exp
  _or: [ch_time_slot_bool_exp]
  ch_helper_time_slots: ch_helper_time_slots_bool_exp
  ch_proposal_time_slots: ch_proposal_time_slots_bool_exp
  end_time: timestamptz_comparison_exp
  id: Int_comparison_exp
  start_time: timestamptz_comparison_exp
}

# unique or primary key constraints on table "ch_time_slot"
enum ch_time_slot_constraint {
  # unique or primary key constraint
  ch_time_slot_pkey
}

# input type for incrementing integer column in table "ch_time_slot"
input ch_time_slot_inc_input {
  id: Int
}

# input type for inserting data into table "ch_time_slot"
input ch_time_slot_insert_input {
  ch_helper_time_slots: ch_helper_time_slots_arr_rel_insert_input
  ch_proposal_time_slots: ch_proposal_time_slots_arr_rel_insert_input
  end_time: timestamptz
  id: Int
  start_time: timestamptz
}

# aggregate max on columns
type ch_time_slot_max_fields {
  end_time: timestamptz
  id: Int
  start_time: timestamptz
}

# order by max() on columns of table "ch_time_slot"
input ch_time_slot_max_order_by {
  end_time: order_by
  id: order_by
  start_time: order_by
}

# aggregate min on columns
type ch_time_slot_min_fields {
  end_time: timestamptz
  id: Int
  start_time: timestamptz
}

# order by min() on columns of table "ch_time_slot"
input ch_time_slot_min_order_by {
  end_time: order_by
  id: order_by
  start_time: order_by
}

# response of any mutation on the table "ch_time_slot"
type ch_time_slot_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_time_slot!]!
}

# input type for inserting object relation for remote table "ch_time_slot"
input ch_time_slot_obj_rel_insert_input {
  data: ch_time_slot_insert_input!
  on_conflict: ch_time_slot_on_conflict
}

# on conflict condition type for table "ch_time_slot"
input ch_time_slot_on_conflict {
  constraint: ch_time_slot_constraint!
  update_columns: [ch_time_slot_update_column!]!
  where: ch_time_slot_bool_exp
}

# ordering options when selecting data from "ch_time_slot"
input ch_time_slot_order_by {
  ch_helper_time_slots_aggregate: ch_helper_time_slots_aggregate_order_by
  ch_proposal_time_slots_aggregate: ch_proposal_time_slots_aggregate_order_by
  end_time: order_by
  id: order_by
  start_time: order_by
}

# primary key columns input for table: "ch_time_slot"
input ch_time_slot_pk_columns_input {
  id: Int!
}

# select columns of table "ch_time_slot"
enum ch_time_slot_select_column {
  # column name
  end_time

  # column name
  id

  # column name
  start_time
}

# input type for updating data in table "ch_time_slot"
input ch_time_slot_set_input {
  end_time: timestamptz
  id: Int
  start_time: timestamptz
}

# aggregate stddev on columns
type ch_time_slot_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "ch_time_slot"
input ch_time_slot_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type ch_time_slot_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "ch_time_slot"
input ch_time_slot_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type ch_time_slot_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "ch_time_slot"
input ch_time_slot_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type ch_time_slot_sum_fields {
  id: Int
}

# order by sum() on columns of table "ch_time_slot"
input ch_time_slot_sum_order_by {
  id: order_by
}

# update columns of table "ch_time_slot"
enum ch_time_slot_update_column {
  # column name
  end_time

  # column name
  id

  # column name
  start_time
}

# aggregate var_pop on columns
type ch_time_slot_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "ch_time_slot"
input ch_time_slot_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type ch_time_slot_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "ch_time_slot"
input ch_time_slot_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type ch_time_slot_variance_fields {
  id: Float
}

# order by variance() on columns of table "ch_time_slot"
input ch_time_slot_variance_order_by {
  id: order_by
}

# columns and relationships of "ch_time_table"
type ch_time_table {
  # An object relationship
  ch_helper: ch_helper

  # An object relationship
  ch_room: ch_room
  end_time: timestamptz!
  helper_confirmed: Boolean!
  helper_id: Int
  id: Int!
  meeting_confirmed: Boolean!
  meeting_id: Int

  # An object relationship
  nb_meeting: nb_meeting
  room_id: Int
  start_time: timestamptz!
}

# aggregated selection of "ch_time_table"
type ch_time_table_aggregate {
  aggregate: ch_time_table_aggregate_fields
  nodes: [ch_time_table!]!
}

# aggregate fields of "ch_time_table"
type ch_time_table_aggregate_fields {
  avg: ch_time_table_avg_fields
  count(columns: [ch_time_table_select_column!], distinct: Boolean): Int
  max: ch_time_table_max_fields
  min: ch_time_table_min_fields
  stddev: ch_time_table_stddev_fields
  stddev_pop: ch_time_table_stddev_pop_fields
  stddev_samp: ch_time_table_stddev_samp_fields
  sum: ch_time_table_sum_fields
  var_pop: ch_time_table_var_pop_fields
  var_samp: ch_time_table_var_samp_fields
  variance: ch_time_table_variance_fields
}

# order by aggregate values of table "ch_time_table"
input ch_time_table_aggregate_order_by {
  avg: ch_time_table_avg_order_by
  count: order_by
  max: ch_time_table_max_order_by
  min: ch_time_table_min_order_by
  stddev: ch_time_table_stddev_order_by
  stddev_pop: ch_time_table_stddev_pop_order_by
  stddev_samp: ch_time_table_stddev_samp_order_by
  sum: ch_time_table_sum_order_by
  var_pop: ch_time_table_var_pop_order_by
  var_samp: ch_time_table_var_samp_order_by
  variance: ch_time_table_variance_order_by
}

# input type for inserting array relation for remote table "ch_time_table"
input ch_time_table_arr_rel_insert_input {
  data: [ch_time_table_insert_input!]!
  on_conflict: ch_time_table_on_conflict
}

# aggregate avg on columns
type ch_time_table_avg_fields {
  helper_id: Float
  id: Float
  meeting_id: Float
  room_id: Float
}

# order by avg() on columns of table "ch_time_table"
input ch_time_table_avg_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# Boolean expression to filter rows from the table "ch_time_table". All fields are combined with a logical 'AND'.
input ch_time_table_bool_exp {
  _and: [ch_time_table_bool_exp]
  _not: ch_time_table_bool_exp
  _or: [ch_time_table_bool_exp]
  ch_helper: ch_helper_bool_exp
  ch_room: ch_room_bool_exp
  end_time: timestamptz_comparison_exp
  helper_confirmed: Boolean_comparison_exp
  helper_id: Int_comparison_exp
  id: Int_comparison_exp
  meeting_confirmed: Boolean_comparison_exp
  meeting_id: Int_comparison_exp
  nb_meeting: nb_meeting_bool_exp
  room_id: Int_comparison_exp
  start_time: timestamptz_comparison_exp
}

# unique or primary key constraints on table "ch_time_table"
enum ch_time_table_constraint {
  # unique or primary key constraint
  ch_time_table_meeting_id_key

  # unique or primary key constraint
  ch_time_table_pkey
}

# input type for incrementing integer column in table "ch_time_table"
input ch_time_table_inc_input {
  helper_id: Int
  id: Int
  meeting_id: Int
  room_id: Int
}

# input type for inserting data into table "ch_time_table"
input ch_time_table_insert_input {
  ch_helper: ch_helper_obj_rel_insert_input
  ch_room: ch_room_obj_rel_insert_input
  end_time: timestamptz
  helper_confirmed: Boolean
  helper_id: Int
  id: Int
  meeting_confirmed: Boolean
  meeting_id: Int
  nb_meeting: nb_meeting_obj_rel_insert_input
  room_id: Int
  start_time: timestamptz
}

# aggregate max on columns
type ch_time_table_max_fields {
  end_time: timestamptz
  helper_id: Int
  id: Int
  meeting_id: Int
  room_id: Int
  start_time: timestamptz
}

# order by max() on columns of table "ch_time_table"
input ch_time_table_max_order_by {
  end_time: order_by
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
  start_time: order_by
}

# aggregate min on columns
type ch_time_table_min_fields {
  end_time: timestamptz
  helper_id: Int
  id: Int
  meeting_id: Int
  room_id: Int
  start_time: timestamptz
}

# order by min() on columns of table "ch_time_table"
input ch_time_table_min_order_by {
  end_time: order_by
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
  start_time: order_by
}

# response of any mutation on the table "ch_time_table"
type ch_time_table_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_time_table!]!
}

# input type for inserting object relation for remote table "ch_time_table"
input ch_time_table_obj_rel_insert_input {
  data: ch_time_table_insert_input!
  on_conflict: ch_time_table_on_conflict
}

# on conflict condition type for table "ch_time_table"
input ch_time_table_on_conflict {
  constraint: ch_time_table_constraint!
  update_columns: [ch_time_table_update_column!]!
  where: ch_time_table_bool_exp
}

# ordering options when selecting data from "ch_time_table"
input ch_time_table_order_by {
  ch_helper: ch_helper_order_by
  ch_room: ch_room_order_by
  end_time: order_by
  helper_confirmed: order_by
  helper_id: order_by
  id: order_by
  meeting_confirmed: order_by
  meeting_id: order_by
  nb_meeting: nb_meeting_order_by
  room_id: order_by
  start_time: order_by
}

# primary key columns input for table: "ch_time_table"
input ch_time_table_pk_columns_input {
  id: Int!
}

# select columns of table "ch_time_table"
enum ch_time_table_select_column {
  # column name
  end_time

  # column name
  helper_confirmed

  # column name
  helper_id

  # column name
  id

  # column name
  meeting_confirmed

  # column name
  meeting_id

  # column name
  room_id

  # column name
  start_time
}

# input type for updating data in table "ch_time_table"
input ch_time_table_set_input {
  end_time: timestamptz
  helper_confirmed: Boolean
  helper_id: Int
  id: Int
  meeting_confirmed: Boolean
  meeting_id: Int
  room_id: Int
  start_time: timestamptz
}

# aggregate stddev on columns
type ch_time_table_stddev_fields {
  helper_id: Float
  id: Float
  meeting_id: Float
  room_id: Float
}

# order by stddev() on columns of table "ch_time_table"
input ch_time_table_stddev_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# aggregate stddev_pop on columns
type ch_time_table_stddev_pop_fields {
  helper_id: Float
  id: Float
  meeting_id: Float
  room_id: Float
}

# order by stddev_pop() on columns of table "ch_time_table"
input ch_time_table_stddev_pop_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# aggregate stddev_samp on columns
type ch_time_table_stddev_samp_fields {
  helper_id: Float
  id: Float
  meeting_id: Float
  room_id: Float
}

# order by stddev_samp() on columns of table "ch_time_table"
input ch_time_table_stddev_samp_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# aggregate sum on columns
type ch_time_table_sum_fields {
  helper_id: Int
  id: Int
  meeting_id: Int
  room_id: Int
}

# order by sum() on columns of table "ch_time_table"
input ch_time_table_sum_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# update columns of table "ch_time_table"
enum ch_time_table_update_column {
  # column name
  end_time

  # column name
  helper_confirmed

  # column name
  helper_id

  # column name
  id

  # column name
  meeting_confirmed

  # column name
  meeting_id

  # column name
  room_id

  # column name
  start_time
}

# aggregate var_pop on columns
type ch_time_table_var_pop_fields {
  helper_id: Float
  id: Float
  meeting_id: Float
  room_id: Float
}

# order by var_pop() on columns of table "ch_time_table"
input ch_time_table_var_pop_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# aggregate var_samp on columns
type ch_time_table_var_samp_fields {
  helper_id: Float
  id: Float
  meeting_id: Float
  room_id: Float
}

# order by var_samp() on columns of table "ch_time_table"
input ch_time_table_var_samp_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# aggregate variance on columns
type ch_time_table_variance_fields {
  helper_id: Float
  id: Float
  meeting_id: Float
  room_id: Float
}

# order by variance() on columns of table "ch_time_table"
input ch_time_table_variance_order_by {
  helper_id: order_by
  id: order_by
  meeting_id: order_by
  room_id: order_by
}

# columns and relationships of "ch_wait_list"
type ch_wait_list {
  # An object relationship
  ch_festival: ch_festival!

  # An array relationship
  ch_proposals(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): [ch_proposal!]!

  # An aggregated array relationship
  ch_proposals_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): ch_proposal_aggregate!
  festival_id: Int!
  id: Int!
  name: String!
}

# aggregated selection of "ch_wait_list"
type ch_wait_list_aggregate {
  aggregate: ch_wait_list_aggregate_fields
  nodes: [ch_wait_list!]!
}

# aggregate fields of "ch_wait_list"
type ch_wait_list_aggregate_fields {
  avg: ch_wait_list_avg_fields
  count(columns: [ch_wait_list_select_column!], distinct: Boolean): Int
  max: ch_wait_list_max_fields
  min: ch_wait_list_min_fields
  stddev: ch_wait_list_stddev_fields
  stddev_pop: ch_wait_list_stddev_pop_fields
  stddev_samp: ch_wait_list_stddev_samp_fields
  sum: ch_wait_list_sum_fields
  var_pop: ch_wait_list_var_pop_fields
  var_samp: ch_wait_list_var_samp_fields
  variance: ch_wait_list_variance_fields
}

# order by aggregate values of table "ch_wait_list"
input ch_wait_list_aggregate_order_by {
  avg: ch_wait_list_avg_order_by
  count: order_by
  max: ch_wait_list_max_order_by
  min: ch_wait_list_min_order_by
  stddev: ch_wait_list_stddev_order_by
  stddev_pop: ch_wait_list_stddev_pop_order_by
  stddev_samp: ch_wait_list_stddev_samp_order_by
  sum: ch_wait_list_sum_order_by
  var_pop: ch_wait_list_var_pop_order_by
  var_samp: ch_wait_list_var_samp_order_by
  variance: ch_wait_list_variance_order_by
}

# input type for inserting array relation for remote table "ch_wait_list"
input ch_wait_list_arr_rel_insert_input {
  data: [ch_wait_list_insert_input!]!
  on_conflict: ch_wait_list_on_conflict
}

# aggregate avg on columns
type ch_wait_list_avg_fields {
  festival_id: Float
  id: Float
}

# order by avg() on columns of table "ch_wait_list"
input ch_wait_list_avg_order_by {
  festival_id: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "ch_wait_list". All fields are combined with a logical 'AND'.
input ch_wait_list_bool_exp {
  _and: [ch_wait_list_bool_exp]
  _not: ch_wait_list_bool_exp
  _or: [ch_wait_list_bool_exp]
  ch_festival: ch_festival_bool_exp
  ch_proposals: ch_proposal_bool_exp
  festival_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "ch_wait_list"
enum ch_wait_list_constraint {
  # unique or primary key constraint
  ch_wait_list_pkey
}

# input type for incrementing integer column in table "ch_wait_list"
input ch_wait_list_inc_input {
  festival_id: Int
  id: Int
}

# input type for inserting data into table "ch_wait_list"
input ch_wait_list_insert_input {
  ch_festival: ch_festival_obj_rel_insert_input
  ch_proposals: ch_proposal_arr_rel_insert_input
  festival_id: Int
  id: Int
  name: String
}

# aggregate max on columns
type ch_wait_list_max_fields {
  festival_id: Int
  id: Int
  name: String
}

# order by max() on columns of table "ch_wait_list"
input ch_wait_list_max_order_by {
  festival_id: order_by
  id: order_by
  name: order_by
}

# aggregate min on columns
type ch_wait_list_min_fields {
  festival_id: Int
  id: Int
  name: String
}

# order by min() on columns of table "ch_wait_list"
input ch_wait_list_min_order_by {
  festival_id: order_by
  id: order_by
  name: order_by
}

# response of any mutation on the table "ch_wait_list"
type ch_wait_list_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [ch_wait_list!]!
}

# input type for inserting object relation for remote table "ch_wait_list"
input ch_wait_list_obj_rel_insert_input {
  data: ch_wait_list_insert_input!
  on_conflict: ch_wait_list_on_conflict
}

# on conflict condition type for table "ch_wait_list"
input ch_wait_list_on_conflict {
  constraint: ch_wait_list_constraint!
  update_columns: [ch_wait_list_update_column!]!
  where: ch_wait_list_bool_exp
}

# ordering options when selecting data from "ch_wait_list"
input ch_wait_list_order_by {
  ch_festival: ch_festival_order_by
  ch_proposals_aggregate: ch_proposal_aggregate_order_by
  festival_id: order_by
  id: order_by
  name: order_by
}

# primary key columns input for table: "ch_wait_list"
input ch_wait_list_pk_columns_input {
  id: Int!
}

# select columns of table "ch_wait_list"
enum ch_wait_list_select_column {
  # column name
  festival_id

  # column name
  id

  # column name
  name
}

# input type for updating data in table "ch_wait_list"
input ch_wait_list_set_input {
  festival_id: Int
  id: Int
  name: String
}

# aggregate stddev on columns
type ch_wait_list_stddev_fields {
  festival_id: Float
  id: Float
}

# order by stddev() on columns of table "ch_wait_list"
input ch_wait_list_stddev_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type ch_wait_list_stddev_pop_fields {
  festival_id: Float
  id: Float
}

# order by stddev_pop() on columns of table "ch_wait_list"
input ch_wait_list_stddev_pop_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type ch_wait_list_stddev_samp_fields {
  festival_id: Float
  id: Float
}

# order by stddev_samp() on columns of table "ch_wait_list"
input ch_wait_list_stddev_samp_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate sum on columns
type ch_wait_list_sum_fields {
  festival_id: Int
  id: Int
}

# order by sum() on columns of table "ch_wait_list"
input ch_wait_list_sum_order_by {
  festival_id: order_by
  id: order_by
}

# update columns of table "ch_wait_list"
enum ch_wait_list_update_column {
  # column name
  festival_id

  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type ch_wait_list_var_pop_fields {
  festival_id: Float
  id: Float
}

# order by var_pop() on columns of table "ch_wait_list"
input ch_wait_list_var_pop_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate var_samp on columns
type ch_wait_list_var_samp_fields {
  festival_id: Float
  id: Float
}

# order by var_samp() on columns of table "ch_wait_list"
input ch_wait_list_var_samp_order_by {
  festival_id: order_by
  id: order_by
}

# aggregate variance on columns
type ch_wait_list_variance_fields {
  festival_id: Float
  id: Float
}

# order by variance() on columns of table "ch_wait_list"
input ch_wait_list_variance_order_by {
  festival_id: order_by
  id: order_by
}

# columns and relationships of "cr_user"
type cr_user {
  auth0_id: Int

  # An array relationship
  ch_helpers(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): [ch_helper!]!

  # An aggregated array relationship
  ch_helpers_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): ch_helper_aggregate!

  # An array relationship
  ch_proposals(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): [ch_proposal!]!

  # An aggregated array relationship
  ch_proposals_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): ch_proposal_aggregate!
  date_joined: timestamptz!
  email: String!
  first_name: String!
  is_active: Boolean!
  is_staff: Boolean!
  is_superuser: Boolean!
  last_login: timestamptz
  last_name: String!
  locale: String!

  # An array relationship
  nb_guild_members(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): [nb_guild_member!]!

  # An aggregated array relationship
  nb_guild_members_aggregate(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): nb_guild_member_aggregate!

  # An array relationship
  nb_meeting_participants(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): [nb_meeting_participants!]!

  # An aggregated array relationship
  nb_meeting_participants_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): nb_meeting_participants_aggregate!

  # An array relationship
  nb_meetings(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): [nb_meeting!]!

  # An aggregated array relationship
  nb_meetings_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): nb_meeting_aggregate!

  # An array relationship
  nb_sphere_managers(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): [nb_sphere_managers!]!

  # An aggregated array relationship
  nb_sphere_managers_aggregate(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): nb_sphere_managers_aggregate!
  password: String!
  username: String!
  uuid: uuid!
}

# aggregated selection of "cr_user"
type cr_user_aggregate {
  aggregate: cr_user_aggregate_fields
  nodes: [cr_user!]!
}

# aggregate fields of "cr_user"
type cr_user_aggregate_fields {
  avg: cr_user_avg_fields
  count(columns: [cr_user_select_column!], distinct: Boolean): Int
  max: cr_user_max_fields
  min: cr_user_min_fields
  stddev: cr_user_stddev_fields
  stddev_pop: cr_user_stddev_pop_fields
  stddev_samp: cr_user_stddev_samp_fields
  sum: cr_user_sum_fields
  var_pop: cr_user_var_pop_fields
  var_samp: cr_user_var_samp_fields
  variance: cr_user_variance_fields
}

# order by aggregate values of table "cr_user"
input cr_user_aggregate_order_by {
  avg: cr_user_avg_order_by
  count: order_by
  max: cr_user_max_order_by
  min: cr_user_min_order_by
  stddev: cr_user_stddev_order_by
  stddev_pop: cr_user_stddev_pop_order_by
  stddev_samp: cr_user_stddev_samp_order_by
  sum: cr_user_sum_order_by
  var_pop: cr_user_var_pop_order_by
  var_samp: cr_user_var_samp_order_by
  variance: cr_user_variance_order_by
}

# input type for inserting array relation for remote table "cr_user"
input cr_user_arr_rel_insert_input {
  data: [cr_user_insert_input!]!
  on_conflict: cr_user_on_conflict
}

# aggregate avg on columns
type cr_user_avg_fields {
  auth0_id: Float
}

# order by avg() on columns of table "cr_user"
input cr_user_avg_order_by {
  auth0_id: order_by
}

# Boolean expression to filter rows from the table "cr_user". All fields are combined with a logical 'AND'.
input cr_user_bool_exp {
  _and: [cr_user_bool_exp]
  _not: cr_user_bool_exp
  _or: [cr_user_bool_exp]
  auth0_id: Int_comparison_exp
  ch_helpers: ch_helper_bool_exp
  ch_proposals: ch_proposal_bool_exp
  date_joined: timestamptz_comparison_exp
  email: String_comparison_exp
  first_name: String_comparison_exp
  is_active: Boolean_comparison_exp
  is_staff: Boolean_comparison_exp
  is_superuser: Boolean_comparison_exp
  last_login: timestamptz_comparison_exp
  last_name: String_comparison_exp
  locale: String_comparison_exp
  nb_guild_members: nb_guild_member_bool_exp
  nb_meeting_participants: nb_meeting_participants_bool_exp
  nb_meetings: nb_meeting_bool_exp
  nb_sphere_managers: nb_sphere_managers_bool_exp
  password: String_comparison_exp
  username: String_comparison_exp
  uuid: uuid_comparison_exp
}

# unique or primary key constraints on table "cr_user"
enum cr_user_constraint {
  # unique or primary key constraint
  cr_user_pkey

  # unique or primary key constraint
  cr_user_username_key
}

# input type for incrementing integer column in table "cr_user"
input cr_user_inc_input {
  auth0_id: Int
}

# input type for inserting data into table "cr_user"
input cr_user_insert_input {
  auth0_id: Int
  ch_helpers: ch_helper_arr_rel_insert_input
  ch_proposals: ch_proposal_arr_rel_insert_input
  date_joined: timestamptz
  email: String
  first_name: String
  is_active: Boolean
  is_staff: Boolean
  is_superuser: Boolean
  last_login: timestamptz
  last_name: String
  locale: String
  nb_guild_members: nb_guild_member_arr_rel_insert_input
  nb_meeting_participants: nb_meeting_participants_arr_rel_insert_input
  nb_meetings: nb_meeting_arr_rel_insert_input
  nb_sphere_managers: nb_sphere_managers_arr_rel_insert_input
  password: String
  username: String
  uuid: uuid
}

# aggregate max on columns
type cr_user_max_fields {
  auth0_id: Int
  date_joined: timestamptz
  email: String
  first_name: String
  last_login: timestamptz
  last_name: String
  locale: String
  password: String
  username: String
  uuid: uuid
}

# order by max() on columns of table "cr_user"
input cr_user_max_order_by {
  auth0_id: order_by
  date_joined: order_by
  email: order_by
  first_name: order_by
  last_login: order_by
  last_name: order_by
  locale: order_by
  password: order_by
  username: order_by
  uuid: order_by
}

# aggregate min on columns
type cr_user_min_fields {
  auth0_id: Int
  date_joined: timestamptz
  email: String
  first_name: String
  last_login: timestamptz
  last_name: String
  locale: String
  password: String
  username: String
  uuid: uuid
}

# order by min() on columns of table "cr_user"
input cr_user_min_order_by {
  auth0_id: order_by
  date_joined: order_by
  email: order_by
  first_name: order_by
  last_login: order_by
  last_name: order_by
  locale: order_by
  password: order_by
  username: order_by
  uuid: order_by
}

# response of any mutation on the table "cr_user"
type cr_user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [cr_user!]!
}

# input type for inserting object relation for remote table "cr_user"
input cr_user_obj_rel_insert_input {
  data: cr_user_insert_input!
  on_conflict: cr_user_on_conflict
}

# on conflict condition type for table "cr_user"
input cr_user_on_conflict {
  constraint: cr_user_constraint!
  update_columns: [cr_user_update_column!]!
  where: cr_user_bool_exp
}

# ordering options when selecting data from "cr_user"
input cr_user_order_by {
  auth0_id: order_by
  ch_helpers_aggregate: ch_helper_aggregate_order_by
  ch_proposals_aggregate: ch_proposal_aggregate_order_by
  date_joined: order_by
  email: order_by
  first_name: order_by
  is_active: order_by
  is_staff: order_by
  is_superuser: order_by
  last_login: order_by
  last_name: order_by
  locale: order_by
  nb_guild_members_aggregate: nb_guild_member_aggregate_order_by
  nb_meeting_participants_aggregate: nb_meeting_participants_aggregate_order_by
  nb_meetings_aggregate: nb_meeting_aggregate_order_by
  nb_sphere_managers_aggregate: nb_sphere_managers_aggregate_order_by
  password: order_by
  username: order_by
  uuid: order_by
}

# primary key columns input for table: "cr_user"
input cr_user_pk_columns_input {
  uuid: uuid!
}

# select columns of table "cr_user"
enum cr_user_select_column {
  # column name
  auth0_id

  # column name
  date_joined

  # column name
  email

  # column name
  first_name

  # column name
  is_active

  # column name
  is_staff

  # column name
  is_superuser

  # column name
  last_login

  # column name
  last_name

  # column name
  locale

  # column name
  password

  # column name
  username

  # column name
  uuid
}

# input type for updating data in table "cr_user"
input cr_user_set_input {
  auth0_id: Int
  date_joined: timestamptz
  email: String
  first_name: String
  is_active: Boolean
  is_staff: Boolean
  is_superuser: Boolean
  last_login: timestamptz
  last_name: String
  locale: String
  password: String
  username: String
  uuid: uuid
}

# aggregate stddev on columns
type cr_user_stddev_fields {
  auth0_id: Float
}

# order by stddev() on columns of table "cr_user"
input cr_user_stddev_order_by {
  auth0_id: order_by
}

# aggregate stddev_pop on columns
type cr_user_stddev_pop_fields {
  auth0_id: Float
}

# order by stddev_pop() on columns of table "cr_user"
input cr_user_stddev_pop_order_by {
  auth0_id: order_by
}

# aggregate stddev_samp on columns
type cr_user_stddev_samp_fields {
  auth0_id: Float
}

# order by stddev_samp() on columns of table "cr_user"
input cr_user_stddev_samp_order_by {
  auth0_id: order_by
}

# aggregate sum on columns
type cr_user_sum_fields {
  auth0_id: Int
}

# order by sum() on columns of table "cr_user"
input cr_user_sum_order_by {
  auth0_id: order_by
}

# update columns of table "cr_user"
enum cr_user_update_column {
  # column name
  auth0_id

  # column name
  date_joined

  # column name
  email

  # column name
  first_name

  # column name
  is_active

  # column name
  is_staff

  # column name
  is_superuser

  # column name
  last_login

  # column name
  last_name

  # column name
  locale

  # column name
  password

  # column name
  username

  # column name
  uuid
}

# aggregate var_pop on columns
type cr_user_var_pop_fields {
  auth0_id: Float
}

# order by var_pop() on columns of table "cr_user"
input cr_user_var_pop_order_by {
  auth0_id: order_by
}

# aggregate var_samp on columns
type cr_user_var_samp_fields {
  auth0_id: Float
}

# order by var_samp() on columns of table "cr_user"
input cr_user_var_samp_order_by {
  auth0_id: order_by
}

# aggregate variance on columns
type cr_user_variance_fields {
  auth0_id: Float
}

# order by variance() on columns of table "cr_user"
input cr_user_variance_order_by {
  auth0_id: order_by
}

# columns and relationships of "django_site"
type django_site {
  domain: String!
  id: Int!
  name: String!

  # An object relationship
  nb_sphere: nb_sphere
}

# aggregated selection of "django_site"
type django_site_aggregate {
  aggregate: django_site_aggregate_fields
  nodes: [django_site!]!
}

# aggregate fields of "django_site"
type django_site_aggregate_fields {
  avg: django_site_avg_fields
  count(columns: [django_site_select_column!], distinct: Boolean): Int
  max: django_site_max_fields
  min: django_site_min_fields
  stddev: django_site_stddev_fields
  stddev_pop: django_site_stddev_pop_fields
  stddev_samp: django_site_stddev_samp_fields
  sum: django_site_sum_fields
  var_pop: django_site_var_pop_fields
  var_samp: django_site_var_samp_fields
  variance: django_site_variance_fields
}

# order by aggregate values of table "django_site"
input django_site_aggregate_order_by {
  avg: django_site_avg_order_by
  count: order_by
  max: django_site_max_order_by
  min: django_site_min_order_by
  stddev: django_site_stddev_order_by
  stddev_pop: django_site_stddev_pop_order_by
  stddev_samp: django_site_stddev_samp_order_by
  sum: django_site_sum_order_by
  var_pop: django_site_var_pop_order_by
  var_samp: django_site_var_samp_order_by
  variance: django_site_variance_order_by
}

# input type for inserting array relation for remote table "django_site"
input django_site_arr_rel_insert_input {
  data: [django_site_insert_input!]!
  on_conflict: django_site_on_conflict
}

# aggregate avg on columns
type django_site_avg_fields {
  id: Float
}

# order by avg() on columns of table "django_site"
input django_site_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "django_site". All fields are combined with a logical 'AND'.
input django_site_bool_exp {
  _and: [django_site_bool_exp]
  _not: django_site_bool_exp
  _or: [django_site_bool_exp]
  domain: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  nb_sphere: nb_sphere_bool_exp
}

# unique or primary key constraints on table "django_site"
enum django_site_constraint {
  # unique or primary key constraint
  django_site_domain_a2e37b91_uniq

  # unique or primary key constraint
  django_site_pkey
}

# input type for incrementing integer column in table "django_site"
input django_site_inc_input {
  id: Int
}

# input type for inserting data into table "django_site"
input django_site_insert_input {
  domain: String
  id: Int
  name: String
  nb_sphere: nb_sphere_obj_rel_insert_input
}

# aggregate max on columns
type django_site_max_fields {
  domain: String
  id: Int
  name: String
}

# order by max() on columns of table "django_site"
input django_site_max_order_by {
  domain: order_by
  id: order_by
  name: order_by
}

# aggregate min on columns
type django_site_min_fields {
  domain: String
  id: Int
  name: String
}

# order by min() on columns of table "django_site"
input django_site_min_order_by {
  domain: order_by
  id: order_by
  name: order_by
}

# response of any mutation on the table "django_site"
type django_site_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [django_site!]!
}

# input type for inserting object relation for remote table "django_site"
input django_site_obj_rel_insert_input {
  data: django_site_insert_input!
  on_conflict: django_site_on_conflict
}

# on conflict condition type for table "django_site"
input django_site_on_conflict {
  constraint: django_site_constraint!
  update_columns: [django_site_update_column!]!
  where: django_site_bool_exp
}

# ordering options when selecting data from "django_site"
input django_site_order_by {
  domain: order_by
  id: order_by
  name: order_by
  nb_sphere: nb_sphere_order_by
}

# primary key columns input for table: "django_site"
input django_site_pk_columns_input {
  id: Int!
}

# select columns of table "django_site"
enum django_site_select_column {
  # column name
  domain

  # column name
  id

  # column name
  name
}

# input type for updating data in table "django_site"
input django_site_set_input {
  domain: String
  id: Int
  name: String
}

# aggregate stddev on columns
type django_site_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "django_site"
input django_site_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type django_site_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "django_site"
input django_site_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type django_site_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "django_site"
input django_site_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type django_site_sum_fields {
  id: Int
}

# order by sum() on columns of table "django_site"
input django_site_sum_order_by {
  id: order_by
}

# update columns of table "django_site"
enum django_site_update_column {
  # column name
  domain

  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type django_site_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "django_site"
input django_site_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type django_site_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "django_site"
input django_site_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type django_site_variance_fields {
  id: Float
}

# order by variance() on columns of table "django_site"
input django_site_variance_order_by {
  id: order_by
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar jsonb

# expression to compare columns of type jsonb. All fields are combined with logical 'AND'.
input jsonb_comparison_exp {
  # is the column contained in the given json value
  _contained_in: jsonb

  # does the column contain the given json value at the top level
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  # does the string exist as a top-level key in the column
  _has_key: String

  # do all of these strings exist as top-level keys in the column
  _has_keys_all: [String!]

  # do any of these strings exist as top-level keys in the column
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

# mutation root
type mutation_root {
  # delete data from the table: "ch_festival"
  delete_ch_festival(
    # filter the rows which have to be deleted
    where: ch_festival_bool_exp!
  ): ch_festival_mutation_response

  # delete single row from the table: "ch_festival"
  delete_ch_festival_by_pk(id: Int!): ch_festival

  # delete data from the table: "ch_helper"
  delete_ch_helper(
    # filter the rows which have to be deleted
    where: ch_helper_bool_exp!
  ): ch_helper_mutation_response

  # delete single row from the table: "ch_helper"
  delete_ch_helper_by_pk(id: Int!): ch_helper

  # delete data from the table: "ch_helper_time_slots"
  delete_ch_helper_time_slots(
    # filter the rows which have to be deleted
    where: ch_helper_time_slots_bool_exp!
  ): ch_helper_time_slots_mutation_response

  # delete single row from the table: "ch_helper_time_slots"
  delete_ch_helper_time_slots_by_pk(id: Int!): ch_helper_time_slots

  # delete data from the table: "ch_proposal"
  delete_ch_proposal(
    # filter the rows which have to be deleted
    where: ch_proposal_bool_exp!
  ): ch_proposal_mutation_response

  # delete single row from the table: "ch_proposal"
  delete_ch_proposal_by_pk(id: Int!): ch_proposal

  # delete data from the table: "ch_proposal_time_slots"
  delete_ch_proposal_time_slots(
    # filter the rows which have to be deleted
    where: ch_proposal_time_slots_bool_exp!
  ): ch_proposal_time_slots_mutation_response

  # delete single row from the table: "ch_proposal_time_slots"
  delete_ch_proposal_time_slots_by_pk(id: Int!): ch_proposal_time_slots

  # delete data from the table: "ch_room"
  delete_ch_room(
    # filter the rows which have to be deleted
    where: ch_room_bool_exp!
  ): ch_room_mutation_response

  # delete single row from the table: "ch_room"
  delete_ch_room_by_pk(id: Int!): ch_room

  # delete data from the table: "ch_time_slot"
  delete_ch_time_slot(
    # filter the rows which have to be deleted
    where: ch_time_slot_bool_exp!
  ): ch_time_slot_mutation_response

  # delete single row from the table: "ch_time_slot"
  delete_ch_time_slot_by_pk(id: Int!): ch_time_slot

  # delete data from the table: "ch_time_table"
  delete_ch_time_table(
    # filter the rows which have to be deleted
    where: ch_time_table_bool_exp!
  ): ch_time_table_mutation_response

  # delete single row from the table: "ch_time_table"
  delete_ch_time_table_by_pk(id: Int!): ch_time_table

  # delete data from the table: "ch_wait_list"
  delete_ch_wait_list(
    # filter the rows which have to be deleted
    where: ch_wait_list_bool_exp!
  ): ch_wait_list_mutation_response

  # delete single row from the table: "ch_wait_list"
  delete_ch_wait_list_by_pk(id: Int!): ch_wait_list

  # delete data from the table: "cr_user"
  delete_cr_user(
    # filter the rows which have to be deleted
    where: cr_user_bool_exp!
  ): cr_user_mutation_response

  # delete single row from the table: "cr_user"
  delete_cr_user_by_pk(uuid: uuid!): cr_user

  # delete data from the table: "django_site"
  delete_django_site(
    # filter the rows which have to be deleted
    where: django_site_bool_exp!
  ): django_site_mutation_response

  # delete single row from the table: "django_site"
  delete_django_site_by_pk(id: Int!): django_site

  # delete data from the table: "nb_guild"
  delete_nb_guild(
    # filter the rows which have to be deleted
    where: nb_guild_bool_exp!
  ): nb_guild_mutation_response

  # delete single row from the table: "nb_guild"
  delete_nb_guild_by_pk(id: Int!): nb_guild

  # delete data from the table: "nb_guild_member"
  delete_nb_guild_member(
    # filter the rows which have to be deleted
    where: nb_guild_member_bool_exp!
  ): nb_guild_member_mutation_response

  # delete single row from the table: "nb_guild_member"
  delete_nb_guild_member_by_pk(id: Int!): nb_guild_member

  # delete data from the table: "nb_meeting"
  delete_nb_meeting(
    # filter the rows which have to be deleted
    where: nb_meeting_bool_exp!
  ): nb_meeting_mutation_response

  # delete single row from the table: "nb_meeting"
  delete_nb_meeting_by_pk(id: Int!): nb_meeting

  # delete data from the table: "nb_meeting_participants"
  delete_nb_meeting_participants(
    # filter the rows which have to be deleted
    where: nb_meeting_participants_bool_exp!
  ): nb_meeting_participants_mutation_response

  # delete single row from the table: "nb_meeting_participants"
  delete_nb_meeting_participants_by_pk(id: Int!): nb_meeting_participants

  # delete data from the table: "nb_sphere"
  delete_nb_sphere(
    # filter the rows which have to be deleted
    where: nb_sphere_bool_exp!
  ): nb_sphere_mutation_response

  # delete single row from the table: "nb_sphere"
  delete_nb_sphere_by_pk(id: Int!): nb_sphere

  # delete data from the table: "nb_sphere_managers"
  delete_nb_sphere_managers(
    # filter the rows which have to be deleted
    where: nb_sphere_managers_bool_exp!
  ): nb_sphere_managers_mutation_response

  # delete single row from the table: "nb_sphere_managers"
  delete_nb_sphere_managers_by_pk(id: Int!): nb_sphere_managers

  # insert data into the table: "ch_festival"
  insert_ch_festival(
    # the rows to be inserted
    objects: [ch_festival_insert_input!]!

    # on conflict condition
    on_conflict: ch_festival_on_conflict
  ): ch_festival_mutation_response

  # insert a single row into the table: "ch_festival"
  insert_ch_festival_one(
    # the row to be inserted
    object: ch_festival_insert_input!

    # on conflict condition
    on_conflict: ch_festival_on_conflict
  ): ch_festival

  # insert data into the table: "ch_helper"
  insert_ch_helper(
    # the rows to be inserted
    objects: [ch_helper_insert_input!]!

    # on conflict condition
    on_conflict: ch_helper_on_conflict
  ): ch_helper_mutation_response

  # insert a single row into the table: "ch_helper"
  insert_ch_helper_one(
    # the row to be inserted
    object: ch_helper_insert_input!

    # on conflict condition
    on_conflict: ch_helper_on_conflict
  ): ch_helper

  # insert data into the table: "ch_helper_time_slots"
  insert_ch_helper_time_slots(
    # the rows to be inserted
    objects: [ch_helper_time_slots_insert_input!]!

    # on conflict condition
    on_conflict: ch_helper_time_slots_on_conflict
  ): ch_helper_time_slots_mutation_response

  # insert a single row into the table: "ch_helper_time_slots"
  insert_ch_helper_time_slots_one(
    # the row to be inserted
    object: ch_helper_time_slots_insert_input!

    # on conflict condition
    on_conflict: ch_helper_time_slots_on_conflict
  ): ch_helper_time_slots

  # insert data into the table: "ch_proposal"
  insert_ch_proposal(
    # the rows to be inserted
    objects: [ch_proposal_insert_input!]!

    # on conflict condition
    on_conflict: ch_proposal_on_conflict
  ): ch_proposal_mutation_response

  # insert a single row into the table: "ch_proposal"
  insert_ch_proposal_one(
    # the row to be inserted
    object: ch_proposal_insert_input!

    # on conflict condition
    on_conflict: ch_proposal_on_conflict
  ): ch_proposal

  # insert data into the table: "ch_proposal_time_slots"
  insert_ch_proposal_time_slots(
    # the rows to be inserted
    objects: [ch_proposal_time_slots_insert_input!]!

    # on conflict condition
    on_conflict: ch_proposal_time_slots_on_conflict
  ): ch_proposal_time_slots_mutation_response

  # insert a single row into the table: "ch_proposal_time_slots"
  insert_ch_proposal_time_slots_one(
    # the row to be inserted
    object: ch_proposal_time_slots_insert_input!

    # on conflict condition
    on_conflict: ch_proposal_time_slots_on_conflict
  ): ch_proposal_time_slots

  # insert data into the table: "ch_room"
  insert_ch_room(
    # the rows to be inserted
    objects: [ch_room_insert_input!]!

    # on conflict condition
    on_conflict: ch_room_on_conflict
  ): ch_room_mutation_response

  # insert a single row into the table: "ch_room"
  insert_ch_room_one(
    # the row to be inserted
    object: ch_room_insert_input!

    # on conflict condition
    on_conflict: ch_room_on_conflict
  ): ch_room

  # insert data into the table: "ch_time_slot"
  insert_ch_time_slot(
    # the rows to be inserted
    objects: [ch_time_slot_insert_input!]!

    # on conflict condition
    on_conflict: ch_time_slot_on_conflict
  ): ch_time_slot_mutation_response

  # insert a single row into the table: "ch_time_slot"
  insert_ch_time_slot_one(
    # the row to be inserted
    object: ch_time_slot_insert_input!

    # on conflict condition
    on_conflict: ch_time_slot_on_conflict
  ): ch_time_slot

  # insert data into the table: "ch_time_table"
  insert_ch_time_table(
    # the rows to be inserted
    objects: [ch_time_table_insert_input!]!

    # on conflict condition
    on_conflict: ch_time_table_on_conflict
  ): ch_time_table_mutation_response

  # insert a single row into the table: "ch_time_table"
  insert_ch_time_table_one(
    # the row to be inserted
    object: ch_time_table_insert_input!

    # on conflict condition
    on_conflict: ch_time_table_on_conflict
  ): ch_time_table

  # insert data into the table: "ch_wait_list"
  insert_ch_wait_list(
    # the rows to be inserted
    objects: [ch_wait_list_insert_input!]!

    # on conflict condition
    on_conflict: ch_wait_list_on_conflict
  ): ch_wait_list_mutation_response

  # insert a single row into the table: "ch_wait_list"
  insert_ch_wait_list_one(
    # the row to be inserted
    object: ch_wait_list_insert_input!

    # on conflict condition
    on_conflict: ch_wait_list_on_conflict
  ): ch_wait_list

  # insert data into the table: "cr_user"
  insert_cr_user(
    # the rows to be inserted
    objects: [cr_user_insert_input!]!

    # on conflict condition
    on_conflict: cr_user_on_conflict
  ): cr_user_mutation_response

  # insert a single row into the table: "cr_user"
  insert_cr_user_one(
    # the row to be inserted
    object: cr_user_insert_input!

    # on conflict condition
    on_conflict: cr_user_on_conflict
  ): cr_user

  # insert data into the table: "django_site"
  insert_django_site(
    # the rows to be inserted
    objects: [django_site_insert_input!]!

    # on conflict condition
    on_conflict: django_site_on_conflict
  ): django_site_mutation_response

  # insert a single row into the table: "django_site"
  insert_django_site_one(
    # the row to be inserted
    object: django_site_insert_input!

    # on conflict condition
    on_conflict: django_site_on_conflict
  ): django_site

  # insert data into the table: "nb_guild"
  insert_nb_guild(
    # the rows to be inserted
    objects: [nb_guild_insert_input!]!

    # on conflict condition
    on_conflict: nb_guild_on_conflict
  ): nb_guild_mutation_response

  # insert data into the table: "nb_guild_member"
  insert_nb_guild_member(
    # the rows to be inserted
    objects: [nb_guild_member_insert_input!]!

    # on conflict condition
    on_conflict: nb_guild_member_on_conflict
  ): nb_guild_member_mutation_response

  # insert a single row into the table: "nb_guild_member"
  insert_nb_guild_member_one(
    # the row to be inserted
    object: nb_guild_member_insert_input!

    # on conflict condition
    on_conflict: nb_guild_member_on_conflict
  ): nb_guild_member

  # insert a single row into the table: "nb_guild"
  insert_nb_guild_one(
    # the row to be inserted
    object: nb_guild_insert_input!

    # on conflict condition
    on_conflict: nb_guild_on_conflict
  ): nb_guild

  # insert data into the table: "nb_meeting"
  insert_nb_meeting(
    # the rows to be inserted
    objects: [nb_meeting_insert_input!]!

    # on conflict condition
    on_conflict: nb_meeting_on_conflict
  ): nb_meeting_mutation_response

  # insert a single row into the table: "nb_meeting"
  insert_nb_meeting_one(
    # the row to be inserted
    object: nb_meeting_insert_input!

    # on conflict condition
    on_conflict: nb_meeting_on_conflict
  ): nb_meeting

  # insert data into the table: "nb_meeting_participants"
  insert_nb_meeting_participants(
    # the rows to be inserted
    objects: [nb_meeting_participants_insert_input!]!

    # on conflict condition
    on_conflict: nb_meeting_participants_on_conflict
  ): nb_meeting_participants_mutation_response

  # insert a single row into the table: "nb_meeting_participants"
  insert_nb_meeting_participants_one(
    # the row to be inserted
    object: nb_meeting_participants_insert_input!

    # on conflict condition
    on_conflict: nb_meeting_participants_on_conflict
  ): nb_meeting_participants

  # insert data into the table: "nb_sphere"
  insert_nb_sphere(
    # the rows to be inserted
    objects: [nb_sphere_insert_input!]!

    # on conflict condition
    on_conflict: nb_sphere_on_conflict
  ): nb_sphere_mutation_response

  # insert data into the table: "nb_sphere_managers"
  insert_nb_sphere_managers(
    # the rows to be inserted
    objects: [nb_sphere_managers_insert_input!]!

    # on conflict condition
    on_conflict: nb_sphere_managers_on_conflict
  ): nb_sphere_managers_mutation_response

  # insert a single row into the table: "nb_sphere_managers"
  insert_nb_sphere_managers_one(
    # the row to be inserted
    object: nb_sphere_managers_insert_input!

    # on conflict condition
    on_conflict: nb_sphere_managers_on_conflict
  ): nb_sphere_managers

  # insert a single row into the table: "nb_sphere"
  insert_nb_sphere_one(
    # the row to be inserted
    object: nb_sphere_insert_input!

    # on conflict condition
    on_conflict: nb_sphere_on_conflict
  ): nb_sphere

  # update data of the table: "ch_festival"
  update_ch_festival(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: ch_festival_append_input

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _delete_at_path: ch_festival_delete_at_path_input

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _delete_elem: ch_festival_delete_elem_input

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _delete_key: ch_festival_delete_key_input

    # increments the integer columns with given value of the filtered values
    _inc: ch_festival_inc_input

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: ch_festival_prepend_input

    # sets the columns of the filtered rows to the given values
    _set: ch_festival_set_input

    # filter the rows which have to be updated
    where: ch_festival_bool_exp!
  ): ch_festival_mutation_response

  # update single row of the table: "ch_festival"
  update_ch_festival_by_pk(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: ch_festival_append_input

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _delete_at_path: ch_festival_delete_at_path_input

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _delete_elem: ch_festival_delete_elem_input

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _delete_key: ch_festival_delete_key_input

    # increments the integer columns with given value of the filtered values
    _inc: ch_festival_inc_input

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: ch_festival_prepend_input

    # sets the columns of the filtered rows to the given values
    _set: ch_festival_set_input
    pk_columns: ch_festival_pk_columns_input!
  ): ch_festival

  # update data of the table: "ch_helper"
  update_ch_helper(
    # increments the integer columns with given value of the filtered values
    _inc: ch_helper_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_helper_set_input

    # filter the rows which have to be updated
    where: ch_helper_bool_exp!
  ): ch_helper_mutation_response

  # update single row of the table: "ch_helper"
  update_ch_helper_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_helper_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_helper_set_input
    pk_columns: ch_helper_pk_columns_input!
  ): ch_helper

  # update data of the table: "ch_helper_time_slots"
  update_ch_helper_time_slots(
    # increments the integer columns with given value of the filtered values
    _inc: ch_helper_time_slots_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_helper_time_slots_set_input

    # filter the rows which have to be updated
    where: ch_helper_time_slots_bool_exp!
  ): ch_helper_time_slots_mutation_response

  # update single row of the table: "ch_helper_time_slots"
  update_ch_helper_time_slots_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_helper_time_slots_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_helper_time_slots_set_input
    pk_columns: ch_helper_time_slots_pk_columns_input!
  ): ch_helper_time_slots

  # update data of the table: "ch_proposal"
  update_ch_proposal(
    # increments the integer columns with given value of the filtered values
    _inc: ch_proposal_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_proposal_set_input

    # filter the rows which have to be updated
    where: ch_proposal_bool_exp!
  ): ch_proposal_mutation_response

  # update single row of the table: "ch_proposal"
  update_ch_proposal_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_proposal_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_proposal_set_input
    pk_columns: ch_proposal_pk_columns_input!
  ): ch_proposal

  # update data of the table: "ch_proposal_time_slots"
  update_ch_proposal_time_slots(
    # increments the integer columns with given value of the filtered values
    _inc: ch_proposal_time_slots_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_proposal_time_slots_set_input

    # filter the rows which have to be updated
    where: ch_proposal_time_slots_bool_exp!
  ): ch_proposal_time_slots_mutation_response

  # update single row of the table: "ch_proposal_time_slots"
  update_ch_proposal_time_slots_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_proposal_time_slots_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_proposal_time_slots_set_input
    pk_columns: ch_proposal_time_slots_pk_columns_input!
  ): ch_proposal_time_slots

  # update data of the table: "ch_room"
  update_ch_room(
    # increments the integer columns with given value of the filtered values
    _inc: ch_room_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_room_set_input

    # filter the rows which have to be updated
    where: ch_room_bool_exp!
  ): ch_room_mutation_response

  # update single row of the table: "ch_room"
  update_ch_room_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_room_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_room_set_input
    pk_columns: ch_room_pk_columns_input!
  ): ch_room

  # update data of the table: "ch_time_slot"
  update_ch_time_slot(
    # increments the integer columns with given value of the filtered values
    _inc: ch_time_slot_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_time_slot_set_input

    # filter the rows which have to be updated
    where: ch_time_slot_bool_exp!
  ): ch_time_slot_mutation_response

  # update single row of the table: "ch_time_slot"
  update_ch_time_slot_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_time_slot_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_time_slot_set_input
    pk_columns: ch_time_slot_pk_columns_input!
  ): ch_time_slot

  # update data of the table: "ch_time_table"
  update_ch_time_table(
    # increments the integer columns with given value of the filtered values
    _inc: ch_time_table_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_time_table_set_input

    # filter the rows which have to be updated
    where: ch_time_table_bool_exp!
  ): ch_time_table_mutation_response

  # update single row of the table: "ch_time_table"
  update_ch_time_table_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_time_table_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_time_table_set_input
    pk_columns: ch_time_table_pk_columns_input!
  ): ch_time_table

  # update data of the table: "ch_wait_list"
  update_ch_wait_list(
    # increments the integer columns with given value of the filtered values
    _inc: ch_wait_list_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_wait_list_set_input

    # filter the rows which have to be updated
    where: ch_wait_list_bool_exp!
  ): ch_wait_list_mutation_response

  # update single row of the table: "ch_wait_list"
  update_ch_wait_list_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: ch_wait_list_inc_input

    # sets the columns of the filtered rows to the given values
    _set: ch_wait_list_set_input
    pk_columns: ch_wait_list_pk_columns_input!
  ): ch_wait_list

  # update data of the table: "cr_user"
  update_cr_user(
    # increments the integer columns with given value of the filtered values
    _inc: cr_user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: cr_user_set_input

    # filter the rows which have to be updated
    where: cr_user_bool_exp!
  ): cr_user_mutation_response

  # update single row of the table: "cr_user"
  update_cr_user_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: cr_user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: cr_user_set_input
    pk_columns: cr_user_pk_columns_input!
  ): cr_user

  # update data of the table: "django_site"
  update_django_site(
    # increments the integer columns with given value of the filtered values
    _inc: django_site_inc_input

    # sets the columns of the filtered rows to the given values
    _set: django_site_set_input

    # filter the rows which have to be updated
    where: django_site_bool_exp!
  ): django_site_mutation_response

  # update single row of the table: "django_site"
  update_django_site_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: django_site_inc_input

    # sets the columns of the filtered rows to the given values
    _set: django_site_set_input
    pk_columns: django_site_pk_columns_input!
  ): django_site

  # update data of the table: "nb_guild"
  update_nb_guild(
    # increments the integer columns with given value of the filtered values
    _inc: nb_guild_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_guild_set_input

    # filter the rows which have to be updated
    where: nb_guild_bool_exp!
  ): nb_guild_mutation_response

  # update single row of the table: "nb_guild"
  update_nb_guild_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: nb_guild_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_guild_set_input
    pk_columns: nb_guild_pk_columns_input!
  ): nb_guild

  # update data of the table: "nb_guild_member"
  update_nb_guild_member(
    # increments the integer columns with given value of the filtered values
    _inc: nb_guild_member_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_guild_member_set_input

    # filter the rows which have to be updated
    where: nb_guild_member_bool_exp!
  ): nb_guild_member_mutation_response

  # update single row of the table: "nb_guild_member"
  update_nb_guild_member_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: nb_guild_member_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_guild_member_set_input
    pk_columns: nb_guild_member_pk_columns_input!
  ): nb_guild_member

  # update data of the table: "nb_meeting"
  update_nb_meeting(
    # increments the integer columns with given value of the filtered values
    _inc: nb_meeting_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_meeting_set_input

    # filter the rows which have to be updated
    where: nb_meeting_bool_exp!
  ): nb_meeting_mutation_response

  # update single row of the table: "nb_meeting"
  update_nb_meeting_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: nb_meeting_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_meeting_set_input
    pk_columns: nb_meeting_pk_columns_input!
  ): nb_meeting

  # update data of the table: "nb_meeting_participants"
  update_nb_meeting_participants(
    # increments the integer columns with given value of the filtered values
    _inc: nb_meeting_participants_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_meeting_participants_set_input

    # filter the rows which have to be updated
    where: nb_meeting_participants_bool_exp!
  ): nb_meeting_participants_mutation_response

  # update single row of the table: "nb_meeting_participants"
  update_nb_meeting_participants_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: nb_meeting_participants_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_meeting_participants_set_input
    pk_columns: nb_meeting_participants_pk_columns_input!
  ): nb_meeting_participants

  # update data of the table: "nb_sphere"
  update_nb_sphere(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: nb_sphere_append_input

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _delete_at_path: nb_sphere_delete_at_path_input

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _delete_elem: nb_sphere_delete_elem_input

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _delete_key: nb_sphere_delete_key_input

    # increments the integer columns with given value of the filtered values
    _inc: nb_sphere_inc_input

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: nb_sphere_prepend_input

    # sets the columns of the filtered rows to the given values
    _set: nb_sphere_set_input

    # filter the rows which have to be updated
    where: nb_sphere_bool_exp!
  ): nb_sphere_mutation_response

  # update single row of the table: "nb_sphere"
  update_nb_sphere_by_pk(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: nb_sphere_append_input

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _delete_at_path: nb_sphere_delete_at_path_input

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _delete_elem: nb_sphere_delete_elem_input

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _delete_key: nb_sphere_delete_key_input

    # increments the integer columns with given value of the filtered values
    _inc: nb_sphere_inc_input

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: nb_sphere_prepend_input

    # sets the columns of the filtered rows to the given values
    _set: nb_sphere_set_input
    pk_columns: nb_sphere_pk_columns_input!
  ): nb_sphere

  # update data of the table: "nb_sphere_managers"
  update_nb_sphere_managers(
    # increments the integer columns with given value of the filtered values
    _inc: nb_sphere_managers_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_sphere_managers_set_input

    # filter the rows which have to be updated
    where: nb_sphere_managers_bool_exp!
  ): nb_sphere_managers_mutation_response

  # update single row of the table: "nb_sphere_managers"
  update_nb_sphere_managers_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: nb_sphere_managers_inc_input

    # sets the columns of the filtered rows to the given values
    _set: nb_sphere_managers_set_input
    pk_columns: nb_sphere_managers_pk_columns_input!
  ): nb_sphere_managers
}

# columns and relationships of "nb_guild"
type nb_guild {
  created_at: timestamptz!
  description: String!
  id: Int!
  is_public: Boolean!
  name: String!

  # An array relationship
  nb_guild_members(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): [nb_guild_member!]!

  # An aggregated array relationship
  nb_guild_members_aggregate(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): nb_guild_member_aggregate!

  # An array relationship
  nb_meetings(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): [nb_meeting!]!

  # An aggregated array relationship
  nb_meetings_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): nb_meeting_aggregate!
  slug: String!
  updated_at: timestamptz!
}

# aggregated selection of "nb_guild"
type nb_guild_aggregate {
  aggregate: nb_guild_aggregate_fields
  nodes: [nb_guild!]!
}

# aggregate fields of "nb_guild"
type nb_guild_aggregate_fields {
  avg: nb_guild_avg_fields
  count(columns: [nb_guild_select_column!], distinct: Boolean): Int
  max: nb_guild_max_fields
  min: nb_guild_min_fields
  stddev: nb_guild_stddev_fields
  stddev_pop: nb_guild_stddev_pop_fields
  stddev_samp: nb_guild_stddev_samp_fields
  sum: nb_guild_sum_fields
  var_pop: nb_guild_var_pop_fields
  var_samp: nb_guild_var_samp_fields
  variance: nb_guild_variance_fields
}

# order by aggregate values of table "nb_guild"
input nb_guild_aggregate_order_by {
  avg: nb_guild_avg_order_by
  count: order_by
  max: nb_guild_max_order_by
  min: nb_guild_min_order_by
  stddev: nb_guild_stddev_order_by
  stddev_pop: nb_guild_stddev_pop_order_by
  stddev_samp: nb_guild_stddev_samp_order_by
  sum: nb_guild_sum_order_by
  var_pop: nb_guild_var_pop_order_by
  var_samp: nb_guild_var_samp_order_by
  variance: nb_guild_variance_order_by
}

# input type for inserting array relation for remote table "nb_guild"
input nb_guild_arr_rel_insert_input {
  data: [nb_guild_insert_input!]!
  on_conflict: nb_guild_on_conflict
}

# aggregate avg on columns
type nb_guild_avg_fields {
  id: Float
}

# order by avg() on columns of table "nb_guild"
input nb_guild_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "nb_guild". All fields are combined with a logical 'AND'.
input nb_guild_bool_exp {
  _and: [nb_guild_bool_exp]
  _not: nb_guild_bool_exp
  _or: [nb_guild_bool_exp]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  is_public: Boolean_comparison_exp
  name: String_comparison_exp
  nb_guild_members: nb_guild_member_bool_exp
  nb_meetings: nb_meeting_bool_exp
  slug: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "nb_guild"
enum nb_guild_constraint {
  # unique or primary key constraint
  nb_guild_pkey
}

# input type for incrementing integer column in table "nb_guild"
input nb_guild_inc_input {
  id: Int
}

# input type for inserting data into table "nb_guild"
input nb_guild_insert_input {
  created_at: timestamptz
  description: String
  id: Int
  is_public: Boolean
  name: String
  nb_guild_members: nb_guild_member_arr_rel_insert_input
  nb_meetings: nb_meeting_arr_rel_insert_input
  slug: String
  updated_at: timestamptz
}

# aggregate max on columns
type nb_guild_max_fields {
  created_at: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updated_at: timestamptz
}

# order by max() on columns of table "nb_guild"
input nb_guild_max_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  name: order_by
  slug: order_by
  updated_at: order_by
}

# columns and relationships of "nb_guild_member"
type nb_guild_member {
  # An object relationship
  cr_user: cr_user!
  guild_id: Int!
  id: Int!
  membership_type: String!

  # An object relationship
  nb_guild: nb_guild!
  user_id: uuid!
}

# aggregated selection of "nb_guild_member"
type nb_guild_member_aggregate {
  aggregate: nb_guild_member_aggregate_fields
  nodes: [nb_guild_member!]!
}

# aggregate fields of "nb_guild_member"
type nb_guild_member_aggregate_fields {
  avg: nb_guild_member_avg_fields
  count(columns: [nb_guild_member_select_column!], distinct: Boolean): Int
  max: nb_guild_member_max_fields
  min: nb_guild_member_min_fields
  stddev: nb_guild_member_stddev_fields
  stddev_pop: nb_guild_member_stddev_pop_fields
  stddev_samp: nb_guild_member_stddev_samp_fields
  sum: nb_guild_member_sum_fields
  var_pop: nb_guild_member_var_pop_fields
  var_samp: nb_guild_member_var_samp_fields
  variance: nb_guild_member_variance_fields
}

# order by aggregate values of table "nb_guild_member"
input nb_guild_member_aggregate_order_by {
  avg: nb_guild_member_avg_order_by
  count: order_by
  max: nb_guild_member_max_order_by
  min: nb_guild_member_min_order_by
  stddev: nb_guild_member_stddev_order_by
  stddev_pop: nb_guild_member_stddev_pop_order_by
  stddev_samp: nb_guild_member_stddev_samp_order_by
  sum: nb_guild_member_sum_order_by
  var_pop: nb_guild_member_var_pop_order_by
  var_samp: nb_guild_member_var_samp_order_by
  variance: nb_guild_member_variance_order_by
}

# input type for inserting array relation for remote table "nb_guild_member"
input nb_guild_member_arr_rel_insert_input {
  data: [nb_guild_member_insert_input!]!
  on_conflict: nb_guild_member_on_conflict
}

# aggregate avg on columns
type nb_guild_member_avg_fields {
  guild_id: Float
  id: Float
}

# order by avg() on columns of table "nb_guild_member"
input nb_guild_member_avg_order_by {
  guild_id: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "nb_guild_member". All fields are combined with a logical 'AND'.
input nb_guild_member_bool_exp {
  _and: [nb_guild_member_bool_exp]
  _not: nb_guild_member_bool_exp
  _or: [nb_guild_member_bool_exp]
  cr_user: cr_user_bool_exp
  guild_id: Int_comparison_exp
  id: Int_comparison_exp
  membership_type: String_comparison_exp
  nb_guild: nb_guild_bool_exp
  user_id: uuid_comparison_exp
}

# unique or primary key constraints on table "nb_guild_member"
enum nb_guild_member_constraint {
  # unique or primary key constraint
  nb_guild_member_pkey
}

# input type for incrementing integer column in table "nb_guild_member"
input nb_guild_member_inc_input {
  guild_id: Int
  id: Int
}

# input type for inserting data into table "nb_guild_member"
input nb_guild_member_insert_input {
  cr_user: cr_user_obj_rel_insert_input
  guild_id: Int
  id: Int
  membership_type: String
  nb_guild: nb_guild_obj_rel_insert_input
  user_id: uuid
}

# aggregate max on columns
type nb_guild_member_max_fields {
  guild_id: Int
  id: Int
  membership_type: String
  user_id: uuid
}

# order by max() on columns of table "nb_guild_member"
input nb_guild_member_max_order_by {
  guild_id: order_by
  id: order_by
  membership_type: order_by
  user_id: order_by
}

# aggregate min on columns
type nb_guild_member_min_fields {
  guild_id: Int
  id: Int
  membership_type: String
  user_id: uuid
}

# order by min() on columns of table "nb_guild_member"
input nb_guild_member_min_order_by {
  guild_id: order_by
  id: order_by
  membership_type: order_by
  user_id: order_by
}

# response of any mutation on the table "nb_guild_member"
type nb_guild_member_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [nb_guild_member!]!
}

# input type for inserting object relation for remote table "nb_guild_member"
input nb_guild_member_obj_rel_insert_input {
  data: nb_guild_member_insert_input!
  on_conflict: nb_guild_member_on_conflict
}

# on conflict condition type for table "nb_guild_member"
input nb_guild_member_on_conflict {
  constraint: nb_guild_member_constraint!
  update_columns: [nb_guild_member_update_column!]!
  where: nb_guild_member_bool_exp
}

# ordering options when selecting data from "nb_guild_member"
input nb_guild_member_order_by {
  cr_user: cr_user_order_by
  guild_id: order_by
  id: order_by
  membership_type: order_by
  nb_guild: nb_guild_order_by
  user_id: order_by
}

# primary key columns input for table: "nb_guild_member"
input nb_guild_member_pk_columns_input {
  id: Int!
}

# select columns of table "nb_guild_member"
enum nb_guild_member_select_column {
  # column name
  guild_id

  # column name
  id

  # column name
  membership_type

  # column name
  user_id
}

# input type for updating data in table "nb_guild_member"
input nb_guild_member_set_input {
  guild_id: Int
  id: Int
  membership_type: String
  user_id: uuid
}

# aggregate stddev on columns
type nb_guild_member_stddev_fields {
  guild_id: Float
  id: Float
}

# order by stddev() on columns of table "nb_guild_member"
input nb_guild_member_stddev_order_by {
  guild_id: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type nb_guild_member_stddev_pop_fields {
  guild_id: Float
  id: Float
}

# order by stddev_pop() on columns of table "nb_guild_member"
input nb_guild_member_stddev_pop_order_by {
  guild_id: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type nb_guild_member_stddev_samp_fields {
  guild_id: Float
  id: Float
}

# order by stddev_samp() on columns of table "nb_guild_member"
input nb_guild_member_stddev_samp_order_by {
  guild_id: order_by
  id: order_by
}

# aggregate sum on columns
type nb_guild_member_sum_fields {
  guild_id: Int
  id: Int
}

# order by sum() on columns of table "nb_guild_member"
input nb_guild_member_sum_order_by {
  guild_id: order_by
  id: order_by
}

# update columns of table "nb_guild_member"
enum nb_guild_member_update_column {
  # column name
  guild_id

  # column name
  id

  # column name
  membership_type

  # column name
  user_id
}

# aggregate var_pop on columns
type nb_guild_member_var_pop_fields {
  guild_id: Float
  id: Float
}

# order by var_pop() on columns of table "nb_guild_member"
input nb_guild_member_var_pop_order_by {
  guild_id: order_by
  id: order_by
}

# aggregate var_samp on columns
type nb_guild_member_var_samp_fields {
  guild_id: Float
  id: Float
}

# order by var_samp() on columns of table "nb_guild_member"
input nb_guild_member_var_samp_order_by {
  guild_id: order_by
  id: order_by
}

# aggregate variance on columns
type nb_guild_member_variance_fields {
  guild_id: Float
  id: Float
}

# order by variance() on columns of table "nb_guild_member"
input nb_guild_member_variance_order_by {
  guild_id: order_by
  id: order_by
}

# aggregate min on columns
type nb_guild_min_fields {
  created_at: timestamptz
  description: String
  id: Int
  name: String
  slug: String
  updated_at: timestamptz
}

# order by min() on columns of table "nb_guild"
input nb_guild_min_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  name: order_by
  slug: order_by
  updated_at: order_by
}

# response of any mutation on the table "nb_guild"
type nb_guild_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [nb_guild!]!
}

# input type for inserting object relation for remote table "nb_guild"
input nb_guild_obj_rel_insert_input {
  data: nb_guild_insert_input!
  on_conflict: nb_guild_on_conflict
}

# on conflict condition type for table "nb_guild"
input nb_guild_on_conflict {
  constraint: nb_guild_constraint!
  update_columns: [nb_guild_update_column!]!
  where: nb_guild_bool_exp
}

# ordering options when selecting data from "nb_guild"
input nb_guild_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  is_public: order_by
  name: order_by
  nb_guild_members_aggregate: nb_guild_member_aggregate_order_by
  nb_meetings_aggregate: nb_meeting_aggregate_order_by
  slug: order_by
  updated_at: order_by
}

# primary key columns input for table: "nb_guild"
input nb_guild_pk_columns_input {
  id: Int!
}

# select columns of table "nb_guild"
enum nb_guild_select_column {
  # column name
  created_at

  # column name
  description

  # column name
  id

  # column name
  is_public

  # column name
  name

  # column name
  slug

  # column name
  updated_at
}

# input type for updating data in table "nb_guild"
input nb_guild_set_input {
  created_at: timestamptz
  description: String
  id: Int
  is_public: Boolean
  name: String
  slug: String
  updated_at: timestamptz
}

# aggregate stddev on columns
type nb_guild_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "nb_guild"
input nb_guild_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type nb_guild_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "nb_guild"
input nb_guild_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type nb_guild_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "nb_guild"
input nb_guild_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type nb_guild_sum_fields {
  id: Int
}

# order by sum() on columns of table "nb_guild"
input nb_guild_sum_order_by {
  id: order_by
}

# update columns of table "nb_guild"
enum nb_guild_update_column {
  # column name
  created_at

  # column name
  description

  # column name
  id

  # column name
  is_public

  # column name
  name

  # column name
  slug

  # column name
  updated_at
}

# aggregate var_pop on columns
type nb_guild_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "nb_guild"
input nb_guild_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type nb_guild_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "nb_guild"
input nb_guild_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type nb_guild_variance_fields {
  id: Float
}

# order by variance() on columns of table "nb_guild"
input nb_guild_variance_order_by {
  id: order_by
}

# columns and relationships of "nb_meeting"
type nb_meeting {
  # An object relationship
  ch_time_table: ch_time_table

  # An object relationship
  cr_user: cr_user!
  created_at: timestamptz!
  description: String!
  end_time: timestamptz
  guild_id: Int!
  id: Int!
  image: String
  location: String
  meeting_url: String!
  name: String!

  # An object relationship
  nb_guild: nb_guild!

  # An array relationship
  nb_meeting_participants(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): [nb_meeting_participants!]!

  # An aggregated array relationship
  nb_meeting_participants_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): nb_meeting_participants_aggregate!

  # An object relationship
  nb_sphere: nb_sphere!
  organizer_id: uuid!
  publication_time: timestamptz
  slug: String!
  sphere_id: Int!
  start_time: timestamptz
  updated_at: timestamptz!
}

# aggregated selection of "nb_meeting"
type nb_meeting_aggregate {
  aggregate: nb_meeting_aggregate_fields
  nodes: [nb_meeting!]!
}

# aggregate fields of "nb_meeting"
type nb_meeting_aggregate_fields {
  avg: nb_meeting_avg_fields
  count(columns: [nb_meeting_select_column!], distinct: Boolean): Int
  max: nb_meeting_max_fields
  min: nb_meeting_min_fields
  stddev: nb_meeting_stddev_fields
  stddev_pop: nb_meeting_stddev_pop_fields
  stddev_samp: nb_meeting_stddev_samp_fields
  sum: nb_meeting_sum_fields
  var_pop: nb_meeting_var_pop_fields
  var_samp: nb_meeting_var_samp_fields
  variance: nb_meeting_variance_fields
}

# order by aggregate values of table "nb_meeting"
input nb_meeting_aggregate_order_by {
  avg: nb_meeting_avg_order_by
  count: order_by
  max: nb_meeting_max_order_by
  min: nb_meeting_min_order_by
  stddev: nb_meeting_stddev_order_by
  stddev_pop: nb_meeting_stddev_pop_order_by
  stddev_samp: nb_meeting_stddev_samp_order_by
  sum: nb_meeting_sum_order_by
  var_pop: nb_meeting_var_pop_order_by
  var_samp: nb_meeting_var_samp_order_by
  variance: nb_meeting_variance_order_by
}

# input type for inserting array relation for remote table "nb_meeting"
input nb_meeting_arr_rel_insert_input {
  data: [nb_meeting_insert_input!]!
  on_conflict: nb_meeting_on_conflict
}

# aggregate avg on columns
type nb_meeting_avg_fields {
  guild_id: Float
  id: Float
  sphere_id: Float
}

# order by avg() on columns of table "nb_meeting"
input nb_meeting_avg_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# Boolean expression to filter rows from the table "nb_meeting". All fields are combined with a logical 'AND'.
input nb_meeting_bool_exp {
  _and: [nb_meeting_bool_exp]
  _not: nb_meeting_bool_exp
  _or: [nb_meeting_bool_exp]
  ch_time_table: ch_time_table_bool_exp
  cr_user: cr_user_bool_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  end_time: timestamptz_comparison_exp
  guild_id: Int_comparison_exp
  id: Int_comparison_exp
  image: String_comparison_exp
  location: String_comparison_exp
  meeting_url: String_comparison_exp
  name: String_comparison_exp
  nb_guild: nb_guild_bool_exp
  nb_meeting_participants: nb_meeting_participants_bool_exp
  nb_sphere: nb_sphere_bool_exp
  organizer_id: uuid_comparison_exp
  publication_time: timestamptz_comparison_exp
  slug: String_comparison_exp
  sphere_id: Int_comparison_exp
  start_time: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "nb_meeting"
enum nb_meeting_constraint {
  # unique or primary key constraint
  nb_meeting_pkey
}

# input type for incrementing integer column in table "nb_meeting"
input nb_meeting_inc_input {
  guild_id: Int
  id: Int
  sphere_id: Int
}

# input type for inserting data into table "nb_meeting"
input nb_meeting_insert_input {
  ch_time_table: ch_time_table_obj_rel_insert_input
  cr_user: cr_user_obj_rel_insert_input
  created_at: timestamptz
  description: String
  end_time: timestamptz
  guild_id: Int
  id: Int
  image: String
  location: String
  meeting_url: String
  name: String
  nb_guild: nb_guild_obj_rel_insert_input
  nb_meeting_participants: nb_meeting_participants_arr_rel_insert_input
  nb_sphere: nb_sphere_obj_rel_insert_input
  organizer_id: uuid
  publication_time: timestamptz
  slug: String
  sphere_id: Int
  start_time: timestamptz
  updated_at: timestamptz
}

# aggregate max on columns
type nb_meeting_max_fields {
  created_at: timestamptz
  description: String
  end_time: timestamptz
  guild_id: Int
  id: Int
  image: String
  location: String
  meeting_url: String
  name: String
  organizer_id: uuid
  publication_time: timestamptz
  slug: String
  sphere_id: Int
  start_time: timestamptz
  updated_at: timestamptz
}

# order by max() on columns of table "nb_meeting"
input nb_meeting_max_order_by {
  created_at: order_by
  description: order_by
  end_time: order_by
  guild_id: order_by
  id: order_by
  image: order_by
  location: order_by
  meeting_url: order_by
  name: order_by
  organizer_id: order_by
  publication_time: order_by
  slug: order_by
  sphere_id: order_by
  start_time: order_by
  updated_at: order_by
}

# aggregate min on columns
type nb_meeting_min_fields {
  created_at: timestamptz
  description: String
  end_time: timestamptz
  guild_id: Int
  id: Int
  image: String
  location: String
  meeting_url: String
  name: String
  organizer_id: uuid
  publication_time: timestamptz
  slug: String
  sphere_id: Int
  start_time: timestamptz
  updated_at: timestamptz
}

# order by min() on columns of table "nb_meeting"
input nb_meeting_min_order_by {
  created_at: order_by
  description: order_by
  end_time: order_by
  guild_id: order_by
  id: order_by
  image: order_by
  location: order_by
  meeting_url: order_by
  name: order_by
  organizer_id: order_by
  publication_time: order_by
  slug: order_by
  sphere_id: order_by
  start_time: order_by
  updated_at: order_by
}

# response of any mutation on the table "nb_meeting"
type nb_meeting_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [nb_meeting!]!
}

# input type for inserting object relation for remote table "nb_meeting"
input nb_meeting_obj_rel_insert_input {
  data: nb_meeting_insert_input!
  on_conflict: nb_meeting_on_conflict
}

# on conflict condition type for table "nb_meeting"
input nb_meeting_on_conflict {
  constraint: nb_meeting_constraint!
  update_columns: [nb_meeting_update_column!]!
  where: nb_meeting_bool_exp
}

# ordering options when selecting data from "nb_meeting"
input nb_meeting_order_by {
  ch_time_table: ch_time_table_order_by
  cr_user: cr_user_order_by
  created_at: order_by
  description: order_by
  end_time: order_by
  guild_id: order_by
  id: order_by
  image: order_by
  location: order_by
  meeting_url: order_by
  name: order_by
  nb_guild: nb_guild_order_by
  nb_meeting_participants_aggregate: nb_meeting_participants_aggregate_order_by
  nb_sphere: nb_sphere_order_by
  organizer_id: order_by
  publication_time: order_by
  slug: order_by
  sphere_id: order_by
  start_time: order_by
  updated_at: order_by
}

# columns and relationships of "nb_meeting_participants"
type nb_meeting_participants {
  # An object relationship
  cr_user: cr_user!
  id: Int!
  meeting_id: Int!

  # An object relationship
  nb_meeting: nb_meeting!
  user_id: uuid!
}

# aggregated selection of "nb_meeting_participants"
type nb_meeting_participants_aggregate {
  aggregate: nb_meeting_participants_aggregate_fields
  nodes: [nb_meeting_participants!]!
}

# aggregate fields of "nb_meeting_participants"
type nb_meeting_participants_aggregate_fields {
  avg: nb_meeting_participants_avg_fields
  count(
    columns: [nb_meeting_participants_select_column!]
    distinct: Boolean
  ): Int
  max: nb_meeting_participants_max_fields
  min: nb_meeting_participants_min_fields
  stddev: nb_meeting_participants_stddev_fields
  stddev_pop: nb_meeting_participants_stddev_pop_fields
  stddev_samp: nb_meeting_participants_stddev_samp_fields
  sum: nb_meeting_participants_sum_fields
  var_pop: nb_meeting_participants_var_pop_fields
  var_samp: nb_meeting_participants_var_samp_fields
  variance: nb_meeting_participants_variance_fields
}

# order by aggregate values of table "nb_meeting_participants"
input nb_meeting_participants_aggregate_order_by {
  avg: nb_meeting_participants_avg_order_by
  count: order_by
  max: nb_meeting_participants_max_order_by
  min: nb_meeting_participants_min_order_by
  stddev: nb_meeting_participants_stddev_order_by
  stddev_pop: nb_meeting_participants_stddev_pop_order_by
  stddev_samp: nb_meeting_participants_stddev_samp_order_by
  sum: nb_meeting_participants_sum_order_by
  var_pop: nb_meeting_participants_var_pop_order_by
  var_samp: nb_meeting_participants_var_samp_order_by
  variance: nb_meeting_participants_variance_order_by
}

# input type for inserting array relation for remote table "nb_meeting_participants"
input nb_meeting_participants_arr_rel_insert_input {
  data: [nb_meeting_participants_insert_input!]!
  on_conflict: nb_meeting_participants_on_conflict
}

# aggregate avg on columns
type nb_meeting_participants_avg_fields {
  id: Float
  meeting_id: Float
}

# order by avg() on columns of table "nb_meeting_participants"
input nb_meeting_participants_avg_order_by {
  id: order_by
  meeting_id: order_by
}

# Boolean expression to filter rows from the table "nb_meeting_participants". All fields are combined with a logical 'AND'.
input nb_meeting_participants_bool_exp {
  _and: [nb_meeting_participants_bool_exp]
  _not: nb_meeting_participants_bool_exp
  _or: [nb_meeting_participants_bool_exp]
  cr_user: cr_user_bool_exp
  id: Int_comparison_exp
  meeting_id: Int_comparison_exp
  nb_meeting: nb_meeting_bool_exp
  user_id: uuid_comparison_exp
}

# unique or primary key constraints on table "nb_meeting_participants"
enum nb_meeting_participants_constraint {
  # unique or primary key constraint
  nb_meeting_participants_meeting_id_user_id_5e7feeb9_uniq

  # unique or primary key constraint
  nb_meeting_participants_pkey
}

# input type for incrementing integer column in table "nb_meeting_participants"
input nb_meeting_participants_inc_input {
  id: Int
  meeting_id: Int
}

# input type for inserting data into table "nb_meeting_participants"
input nb_meeting_participants_insert_input {
  cr_user: cr_user_obj_rel_insert_input
  id: Int
  meeting_id: Int
  nb_meeting: nb_meeting_obj_rel_insert_input
  user_id: uuid
}

# aggregate max on columns
type nb_meeting_participants_max_fields {
  id: Int
  meeting_id: Int
  user_id: uuid
}

# order by max() on columns of table "nb_meeting_participants"
input nb_meeting_participants_max_order_by {
  id: order_by
  meeting_id: order_by
  user_id: order_by
}

# aggregate min on columns
type nb_meeting_participants_min_fields {
  id: Int
  meeting_id: Int
  user_id: uuid
}

# order by min() on columns of table "nb_meeting_participants"
input nb_meeting_participants_min_order_by {
  id: order_by
  meeting_id: order_by
  user_id: order_by
}

# response of any mutation on the table "nb_meeting_participants"
type nb_meeting_participants_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [nb_meeting_participants!]!
}

# input type for inserting object relation for remote table "nb_meeting_participants"
input nb_meeting_participants_obj_rel_insert_input {
  data: nb_meeting_participants_insert_input!
  on_conflict: nb_meeting_participants_on_conflict
}

# on conflict condition type for table "nb_meeting_participants"
input nb_meeting_participants_on_conflict {
  constraint: nb_meeting_participants_constraint!
  update_columns: [nb_meeting_participants_update_column!]!
  where: nb_meeting_participants_bool_exp
}

# ordering options when selecting data from "nb_meeting_participants"
input nb_meeting_participants_order_by {
  cr_user: cr_user_order_by
  id: order_by
  meeting_id: order_by
  nb_meeting: nb_meeting_order_by
  user_id: order_by
}

# primary key columns input for table: "nb_meeting_participants"
input nb_meeting_participants_pk_columns_input {
  id: Int!
}

# select columns of table "nb_meeting_participants"
enum nb_meeting_participants_select_column {
  # column name
  id

  # column name
  meeting_id

  # column name
  user_id
}

# input type for updating data in table "nb_meeting_participants"
input nb_meeting_participants_set_input {
  id: Int
  meeting_id: Int
  user_id: uuid
}

# aggregate stddev on columns
type nb_meeting_participants_stddev_fields {
  id: Float
  meeting_id: Float
}

# order by stddev() on columns of table "nb_meeting_participants"
input nb_meeting_participants_stddev_order_by {
  id: order_by
  meeting_id: order_by
}

# aggregate stddev_pop on columns
type nb_meeting_participants_stddev_pop_fields {
  id: Float
  meeting_id: Float
}

# order by stddev_pop() on columns of table "nb_meeting_participants"
input nb_meeting_participants_stddev_pop_order_by {
  id: order_by
  meeting_id: order_by
}

# aggregate stddev_samp on columns
type nb_meeting_participants_stddev_samp_fields {
  id: Float
  meeting_id: Float
}

# order by stddev_samp() on columns of table "nb_meeting_participants"
input nb_meeting_participants_stddev_samp_order_by {
  id: order_by
  meeting_id: order_by
}

# aggregate sum on columns
type nb_meeting_participants_sum_fields {
  id: Int
  meeting_id: Int
}

# order by sum() on columns of table "nb_meeting_participants"
input nb_meeting_participants_sum_order_by {
  id: order_by
  meeting_id: order_by
}

# update columns of table "nb_meeting_participants"
enum nb_meeting_participants_update_column {
  # column name
  id

  # column name
  meeting_id

  # column name
  user_id
}

# aggregate var_pop on columns
type nb_meeting_participants_var_pop_fields {
  id: Float
  meeting_id: Float
}

# order by var_pop() on columns of table "nb_meeting_participants"
input nb_meeting_participants_var_pop_order_by {
  id: order_by
  meeting_id: order_by
}

# aggregate var_samp on columns
type nb_meeting_participants_var_samp_fields {
  id: Float
  meeting_id: Float
}

# order by var_samp() on columns of table "nb_meeting_participants"
input nb_meeting_participants_var_samp_order_by {
  id: order_by
  meeting_id: order_by
}

# aggregate variance on columns
type nb_meeting_participants_variance_fields {
  id: Float
  meeting_id: Float
}

# order by variance() on columns of table "nb_meeting_participants"
input nb_meeting_participants_variance_order_by {
  id: order_by
  meeting_id: order_by
}

# primary key columns input for table: "nb_meeting"
input nb_meeting_pk_columns_input {
  id: Int!
}

# select columns of table "nb_meeting"
enum nb_meeting_select_column {
  # column name
  created_at

  # column name
  description

  # column name
  end_time

  # column name
  guild_id

  # column name
  id

  # column name
  image

  # column name
  location

  # column name
  meeting_url

  # column name
  name

  # column name
  organizer_id

  # column name
  publication_time

  # column name
  slug

  # column name
  sphere_id

  # column name
  start_time

  # column name
  updated_at
}

# input type for updating data in table "nb_meeting"
input nb_meeting_set_input {
  created_at: timestamptz
  description: String
  end_time: timestamptz
  guild_id: Int
  id: Int
  image: String
  location: String
  meeting_url: String
  name: String
  organizer_id: uuid
  publication_time: timestamptz
  slug: String
  sphere_id: Int
  start_time: timestamptz
  updated_at: timestamptz
}

# aggregate stddev on columns
type nb_meeting_stddev_fields {
  guild_id: Float
  id: Float
  sphere_id: Float
}

# order by stddev() on columns of table "nb_meeting"
input nb_meeting_stddev_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# aggregate stddev_pop on columns
type nb_meeting_stddev_pop_fields {
  guild_id: Float
  id: Float
  sphere_id: Float
}

# order by stddev_pop() on columns of table "nb_meeting"
input nb_meeting_stddev_pop_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# aggregate stddev_samp on columns
type nb_meeting_stddev_samp_fields {
  guild_id: Float
  id: Float
  sphere_id: Float
}

# order by stddev_samp() on columns of table "nb_meeting"
input nb_meeting_stddev_samp_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# aggregate sum on columns
type nb_meeting_sum_fields {
  guild_id: Int
  id: Int
  sphere_id: Int
}

# order by sum() on columns of table "nb_meeting"
input nb_meeting_sum_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# update columns of table "nb_meeting"
enum nb_meeting_update_column {
  # column name
  created_at

  # column name
  description

  # column name
  end_time

  # column name
  guild_id

  # column name
  id

  # column name
  image

  # column name
  location

  # column name
  meeting_url

  # column name
  name

  # column name
  organizer_id

  # column name
  publication_time

  # column name
  slug

  # column name
  sphere_id

  # column name
  start_time

  # column name
  updated_at
}

# aggregate var_pop on columns
type nb_meeting_var_pop_fields {
  guild_id: Float
  id: Float
  sphere_id: Float
}

# order by var_pop() on columns of table "nb_meeting"
input nb_meeting_var_pop_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# aggregate var_samp on columns
type nb_meeting_var_samp_fields {
  guild_id: Float
  id: Float
  sphere_id: Float
}

# order by var_samp() on columns of table "nb_meeting"
input nb_meeting_var_samp_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# aggregate variance on columns
type nb_meeting_variance_fields {
  guild_id: Float
  id: Float
  sphere_id: Float
}

# order by variance() on columns of table "nb_meeting"
input nb_meeting_variance_order_by {
  guild_id: order_by
  id: order_by
  sphere_id: order_by
}

# columns and relationships of "nb_sphere"
type nb_sphere {
  # An array relationship
  ch_festivals(
    # distinct select on columns
    distinct_on: [ch_festival_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_festival_order_by!]

    # filter the rows returned
    where: ch_festival_bool_exp
  ): [ch_festival!]!

  # An aggregated array relationship
  ch_festivals_aggregate(
    # distinct select on columns
    distinct_on: [ch_festival_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_festival_order_by!]

    # filter the rows returned
    where: ch_festival_bool_exp
  ): ch_festival_aggregate!

  # An object relationship
  django_site: django_site
  id: Int!
  is_open: Boolean!
  name: String!

  # An array relationship
  nb_meetings(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): [nb_meeting!]!

  # An aggregated array relationship
  nb_meetings_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): nb_meeting_aggregate!

  # An array relationship
  nb_sphere_managers(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): [nb_sphere_managers!]!

  # An aggregated array relationship
  nb_sphere_managers_aggregate(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): nb_sphere_managers_aggregate!
  settings(
    # JSON select path
    path: String
  ): jsonb
  site_id: Int
}

# aggregated selection of "nb_sphere"
type nb_sphere_aggregate {
  aggregate: nb_sphere_aggregate_fields
  nodes: [nb_sphere!]!
}

# aggregate fields of "nb_sphere"
type nb_sphere_aggregate_fields {
  avg: nb_sphere_avg_fields
  count(columns: [nb_sphere_select_column!], distinct: Boolean): Int
  max: nb_sphere_max_fields
  min: nb_sphere_min_fields
  stddev: nb_sphere_stddev_fields
  stddev_pop: nb_sphere_stddev_pop_fields
  stddev_samp: nb_sphere_stddev_samp_fields
  sum: nb_sphere_sum_fields
  var_pop: nb_sphere_var_pop_fields
  var_samp: nb_sphere_var_samp_fields
  variance: nb_sphere_variance_fields
}

# order by aggregate values of table "nb_sphere"
input nb_sphere_aggregate_order_by {
  avg: nb_sphere_avg_order_by
  count: order_by
  max: nb_sphere_max_order_by
  min: nb_sphere_min_order_by
  stddev: nb_sphere_stddev_order_by
  stddev_pop: nb_sphere_stddev_pop_order_by
  stddev_samp: nb_sphere_stddev_samp_order_by
  sum: nb_sphere_sum_order_by
  var_pop: nb_sphere_var_pop_order_by
  var_samp: nb_sphere_var_samp_order_by
  variance: nb_sphere_variance_order_by
}

# append existing jsonb value of filtered columns with new jsonb value
input nb_sphere_append_input {
  settings: jsonb
}

# input type for inserting array relation for remote table "nb_sphere"
input nb_sphere_arr_rel_insert_input {
  data: [nb_sphere_insert_input!]!
  on_conflict: nb_sphere_on_conflict
}

# aggregate avg on columns
type nb_sphere_avg_fields {
  id: Float
  site_id: Float
}

# order by avg() on columns of table "nb_sphere"
input nb_sphere_avg_order_by {
  id: order_by
  site_id: order_by
}

# Boolean expression to filter rows from the table "nb_sphere". All fields are combined with a logical 'AND'.
input nb_sphere_bool_exp {
  _and: [nb_sphere_bool_exp]
  _not: nb_sphere_bool_exp
  _or: [nb_sphere_bool_exp]
  ch_festivals: ch_festival_bool_exp
  django_site: django_site_bool_exp
  id: Int_comparison_exp
  is_open: Boolean_comparison_exp
  name: String_comparison_exp
  nb_meetings: nb_meeting_bool_exp
  nb_sphere_managers: nb_sphere_managers_bool_exp
  settings: jsonb_comparison_exp
  site_id: Int_comparison_exp
}

# unique or primary key constraints on table "nb_sphere"
enum nb_sphere_constraint {
  # unique or primary key constraint
  nb_sphere_pkey

  # unique or primary key constraint
  nb_sphere_site_id_key
}

# delete the field or element with specified path (for JSON arrays, negative integers count from the end)
input nb_sphere_delete_at_path_input {
  settings: [String]
}

# delete the array element with specified index (negative integers count from the
# end). throws an error if top level container is not an array
input nb_sphere_delete_elem_input {
  settings: Int
}

# delete key/value pair or string element. key/value pairs are matched based on their key value
input nb_sphere_delete_key_input {
  settings: String
}

# input type for incrementing integer column in table "nb_sphere"
input nb_sphere_inc_input {
  id: Int
  site_id: Int
}

# input type for inserting data into table "nb_sphere"
input nb_sphere_insert_input {
  ch_festivals: ch_festival_arr_rel_insert_input
  django_site: django_site_obj_rel_insert_input
  id: Int
  is_open: Boolean
  name: String
  nb_meetings: nb_meeting_arr_rel_insert_input
  nb_sphere_managers: nb_sphere_managers_arr_rel_insert_input
  settings: jsonb
  site_id: Int
}

# columns and relationships of "nb_sphere_managers"
type nb_sphere_managers {
  # An object relationship
  cr_user: cr_user!
  id: Int!

  # An object relationship
  nb_sphere: nb_sphere!
  sphere_id: Int!
  user_id: uuid!
}

# aggregated selection of "nb_sphere_managers"
type nb_sphere_managers_aggregate {
  aggregate: nb_sphere_managers_aggregate_fields
  nodes: [nb_sphere_managers!]!
}

# aggregate fields of "nb_sphere_managers"
type nb_sphere_managers_aggregate_fields {
  avg: nb_sphere_managers_avg_fields
  count(columns: [nb_sphere_managers_select_column!], distinct: Boolean): Int
  max: nb_sphere_managers_max_fields
  min: nb_sphere_managers_min_fields
  stddev: nb_sphere_managers_stddev_fields
  stddev_pop: nb_sphere_managers_stddev_pop_fields
  stddev_samp: nb_sphere_managers_stddev_samp_fields
  sum: nb_sphere_managers_sum_fields
  var_pop: nb_sphere_managers_var_pop_fields
  var_samp: nb_sphere_managers_var_samp_fields
  variance: nb_sphere_managers_variance_fields
}

# order by aggregate values of table "nb_sphere_managers"
input nb_sphere_managers_aggregate_order_by {
  avg: nb_sphere_managers_avg_order_by
  count: order_by
  max: nb_sphere_managers_max_order_by
  min: nb_sphere_managers_min_order_by
  stddev: nb_sphere_managers_stddev_order_by
  stddev_pop: nb_sphere_managers_stddev_pop_order_by
  stddev_samp: nb_sphere_managers_stddev_samp_order_by
  sum: nb_sphere_managers_sum_order_by
  var_pop: nb_sphere_managers_var_pop_order_by
  var_samp: nb_sphere_managers_var_samp_order_by
  variance: nb_sphere_managers_variance_order_by
}

# input type for inserting array relation for remote table "nb_sphere_managers"
input nb_sphere_managers_arr_rel_insert_input {
  data: [nb_sphere_managers_insert_input!]!
  on_conflict: nb_sphere_managers_on_conflict
}

# aggregate avg on columns
type nb_sphere_managers_avg_fields {
  id: Float
  sphere_id: Float
}

# order by avg() on columns of table "nb_sphere_managers"
input nb_sphere_managers_avg_order_by {
  id: order_by
  sphere_id: order_by
}

# Boolean expression to filter rows from the table "nb_sphere_managers". All fields are combined with a logical 'AND'.
input nb_sphere_managers_bool_exp {
  _and: [nb_sphere_managers_bool_exp]
  _not: nb_sphere_managers_bool_exp
  _or: [nb_sphere_managers_bool_exp]
  cr_user: cr_user_bool_exp
  id: Int_comparison_exp
  nb_sphere: nb_sphere_bool_exp
  sphere_id: Int_comparison_exp
  user_id: uuid_comparison_exp
}

# unique or primary key constraints on table "nb_sphere_managers"
enum nb_sphere_managers_constraint {
  # unique or primary key constraint
  nb_sphere_managers_pkey

  # unique or primary key constraint
  nb_sphere_managers_sphere_id_user_id_9c2cd3a3_uniq
}

# input type for incrementing integer column in table "nb_sphere_managers"
input nb_sphere_managers_inc_input {
  id: Int
  sphere_id: Int
}

# input type for inserting data into table "nb_sphere_managers"
input nb_sphere_managers_insert_input {
  cr_user: cr_user_obj_rel_insert_input
  id: Int
  nb_sphere: nb_sphere_obj_rel_insert_input
  sphere_id: Int
  user_id: uuid
}

# aggregate max on columns
type nb_sphere_managers_max_fields {
  id: Int
  sphere_id: Int
  user_id: uuid
}

# order by max() on columns of table "nb_sphere_managers"
input nb_sphere_managers_max_order_by {
  id: order_by
  sphere_id: order_by
  user_id: order_by
}

# aggregate min on columns
type nb_sphere_managers_min_fields {
  id: Int
  sphere_id: Int
  user_id: uuid
}

# order by min() on columns of table "nb_sphere_managers"
input nb_sphere_managers_min_order_by {
  id: order_by
  sphere_id: order_by
  user_id: order_by
}

# response of any mutation on the table "nb_sphere_managers"
type nb_sphere_managers_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [nb_sphere_managers!]!
}

# input type for inserting object relation for remote table "nb_sphere_managers"
input nb_sphere_managers_obj_rel_insert_input {
  data: nb_sphere_managers_insert_input!
  on_conflict: nb_sphere_managers_on_conflict
}

# on conflict condition type for table "nb_sphere_managers"
input nb_sphere_managers_on_conflict {
  constraint: nb_sphere_managers_constraint!
  update_columns: [nb_sphere_managers_update_column!]!
  where: nb_sphere_managers_bool_exp
}

# ordering options when selecting data from "nb_sphere_managers"
input nb_sphere_managers_order_by {
  cr_user: cr_user_order_by
  id: order_by
  nb_sphere: nb_sphere_order_by
  sphere_id: order_by
  user_id: order_by
}

# primary key columns input for table: "nb_sphere_managers"
input nb_sphere_managers_pk_columns_input {
  id: Int!
}

# select columns of table "nb_sphere_managers"
enum nb_sphere_managers_select_column {
  # column name
  id

  # column name
  sphere_id

  # column name
  user_id
}

# input type for updating data in table "nb_sphere_managers"
input nb_sphere_managers_set_input {
  id: Int
  sphere_id: Int
  user_id: uuid
}

# aggregate stddev on columns
type nb_sphere_managers_stddev_fields {
  id: Float
  sphere_id: Float
}

# order by stddev() on columns of table "nb_sphere_managers"
input nb_sphere_managers_stddev_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate stddev_pop on columns
type nb_sphere_managers_stddev_pop_fields {
  id: Float
  sphere_id: Float
}

# order by stddev_pop() on columns of table "nb_sphere_managers"
input nb_sphere_managers_stddev_pop_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate stddev_samp on columns
type nb_sphere_managers_stddev_samp_fields {
  id: Float
  sphere_id: Float
}

# order by stddev_samp() on columns of table "nb_sphere_managers"
input nb_sphere_managers_stddev_samp_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate sum on columns
type nb_sphere_managers_sum_fields {
  id: Int
  sphere_id: Int
}

# order by sum() on columns of table "nb_sphere_managers"
input nb_sphere_managers_sum_order_by {
  id: order_by
  sphere_id: order_by
}

# update columns of table "nb_sphere_managers"
enum nb_sphere_managers_update_column {
  # column name
  id

  # column name
  sphere_id

  # column name
  user_id
}

# aggregate var_pop on columns
type nb_sphere_managers_var_pop_fields {
  id: Float
  sphere_id: Float
}

# order by var_pop() on columns of table "nb_sphere_managers"
input nb_sphere_managers_var_pop_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate var_samp on columns
type nb_sphere_managers_var_samp_fields {
  id: Float
  sphere_id: Float
}

# order by var_samp() on columns of table "nb_sphere_managers"
input nb_sphere_managers_var_samp_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate variance on columns
type nb_sphere_managers_variance_fields {
  id: Float
  sphere_id: Float
}

# order by variance() on columns of table "nb_sphere_managers"
input nb_sphere_managers_variance_order_by {
  id: order_by
  sphere_id: order_by
}

# aggregate max on columns
type nb_sphere_max_fields {
  id: Int
  name: String
  site_id: Int
}

# order by max() on columns of table "nb_sphere"
input nb_sphere_max_order_by {
  id: order_by
  name: order_by
  site_id: order_by
}

# aggregate min on columns
type nb_sphere_min_fields {
  id: Int
  name: String
  site_id: Int
}

# order by min() on columns of table "nb_sphere"
input nb_sphere_min_order_by {
  id: order_by
  name: order_by
  site_id: order_by
}

# response of any mutation on the table "nb_sphere"
type nb_sphere_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [nb_sphere!]!
}

# input type for inserting object relation for remote table "nb_sphere"
input nb_sphere_obj_rel_insert_input {
  data: nb_sphere_insert_input!
  on_conflict: nb_sphere_on_conflict
}

# on conflict condition type for table "nb_sphere"
input nb_sphere_on_conflict {
  constraint: nb_sphere_constraint!
  update_columns: [nb_sphere_update_column!]!
  where: nb_sphere_bool_exp
}

# ordering options when selecting data from "nb_sphere"
input nb_sphere_order_by {
  ch_festivals_aggregate: ch_festival_aggregate_order_by
  django_site: django_site_order_by
  id: order_by
  is_open: order_by
  name: order_by
  nb_meetings_aggregate: nb_meeting_aggregate_order_by
  nb_sphere_managers_aggregate: nb_sphere_managers_aggregate_order_by
  settings: order_by
  site_id: order_by
}

# primary key columns input for table: "nb_sphere"
input nb_sphere_pk_columns_input {
  id: Int!
}

# prepend existing jsonb value of filtered columns with new jsonb value
input nb_sphere_prepend_input {
  settings: jsonb
}

# select columns of table "nb_sphere"
enum nb_sphere_select_column {
  # column name
  id

  # column name
  is_open

  # column name
  name

  # column name
  settings

  # column name
  site_id
}

# input type for updating data in table "nb_sphere"
input nb_sphere_set_input {
  id: Int
  is_open: Boolean
  name: String
  settings: jsonb
  site_id: Int
}

# aggregate stddev on columns
type nb_sphere_stddev_fields {
  id: Float
  site_id: Float
}

# order by stddev() on columns of table "nb_sphere"
input nb_sphere_stddev_order_by {
  id: order_by
  site_id: order_by
}

# aggregate stddev_pop on columns
type nb_sphere_stddev_pop_fields {
  id: Float
  site_id: Float
}

# order by stddev_pop() on columns of table "nb_sphere"
input nb_sphere_stddev_pop_order_by {
  id: order_by
  site_id: order_by
}

# aggregate stddev_samp on columns
type nb_sphere_stddev_samp_fields {
  id: Float
  site_id: Float
}

# order by stddev_samp() on columns of table "nb_sphere"
input nb_sphere_stddev_samp_order_by {
  id: order_by
  site_id: order_by
}

# aggregate sum on columns
type nb_sphere_sum_fields {
  id: Int
  site_id: Int
}

# order by sum() on columns of table "nb_sphere"
input nb_sphere_sum_order_by {
  id: order_by
  site_id: order_by
}

# update columns of table "nb_sphere"
enum nb_sphere_update_column {
  # column name
  id

  # column name
  is_open

  # column name
  name

  # column name
  settings

  # column name
  site_id
}

# aggregate var_pop on columns
type nb_sphere_var_pop_fields {
  id: Float
  site_id: Float
}

# order by var_pop() on columns of table "nb_sphere"
input nb_sphere_var_pop_order_by {
  id: order_by
  site_id: order_by
}

# aggregate var_samp on columns
type nb_sphere_var_samp_fields {
  id: Float
  site_id: Float
}

# order by var_samp() on columns of table "nb_sphere"
input nb_sphere_var_samp_order_by {
  id: order_by
  site_id: order_by
}

# aggregate variance on columns
type nb_sphere_variance_fields {
  id: Float
  site_id: Float
}

# order by variance() on columns of table "nb_sphere"
input nb_sphere_variance_order_by {
  id: order_by
  site_id: order_by
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "ch_festival"
  ch_festival(
    # distinct select on columns
    distinct_on: [ch_festival_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_festival_order_by!]

    # filter the rows returned
    where: ch_festival_bool_exp
  ): [ch_festival!]!

  # fetch aggregated fields from the table: "ch_festival"
  ch_festival_aggregate(
    # distinct select on columns
    distinct_on: [ch_festival_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_festival_order_by!]

    # filter the rows returned
    where: ch_festival_bool_exp
  ): ch_festival_aggregate!

  # fetch data from the table: "ch_festival" using primary key columns
  ch_festival_by_pk(id: Int!): ch_festival

  # fetch data from the table: "ch_helper"
  ch_helper(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): [ch_helper!]!

  # fetch aggregated fields from the table: "ch_helper"
  ch_helper_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): ch_helper_aggregate!

  # fetch data from the table: "ch_helper" using primary key columns
  ch_helper_by_pk(id: Int!): ch_helper

  # fetch data from the table: "ch_helper_time_slots"
  ch_helper_time_slots(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): [ch_helper_time_slots!]!

  # fetch aggregated fields from the table: "ch_helper_time_slots"
  ch_helper_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): ch_helper_time_slots_aggregate!

  # fetch data from the table: "ch_helper_time_slots" using primary key columns
  ch_helper_time_slots_by_pk(id: Int!): ch_helper_time_slots

  # fetch data from the table: "ch_proposal"
  ch_proposal(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): [ch_proposal!]!

  # fetch aggregated fields from the table: "ch_proposal"
  ch_proposal_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): ch_proposal_aggregate!

  # fetch data from the table: "ch_proposal" using primary key columns
  ch_proposal_by_pk(id: Int!): ch_proposal

  # fetch data from the table: "ch_proposal_time_slots"
  ch_proposal_time_slots(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): [ch_proposal_time_slots!]!

  # fetch aggregated fields from the table: "ch_proposal_time_slots"
  ch_proposal_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): ch_proposal_time_slots_aggregate!

  # fetch data from the table: "ch_proposal_time_slots" using primary key columns
  ch_proposal_time_slots_by_pk(id: Int!): ch_proposal_time_slots

  # fetch data from the table: "ch_room"
  ch_room(
    # distinct select on columns
    distinct_on: [ch_room_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_room_order_by!]

    # filter the rows returned
    where: ch_room_bool_exp
  ): [ch_room!]!

  # fetch aggregated fields from the table: "ch_room"
  ch_room_aggregate(
    # distinct select on columns
    distinct_on: [ch_room_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_room_order_by!]

    # filter the rows returned
    where: ch_room_bool_exp
  ): ch_room_aggregate!

  # fetch data from the table: "ch_room" using primary key columns
  ch_room_by_pk(id: Int!): ch_room

  # fetch data from the table: "ch_time_slot"
  ch_time_slot(
    # distinct select on columns
    distinct_on: [ch_time_slot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_slot_order_by!]

    # filter the rows returned
    where: ch_time_slot_bool_exp
  ): [ch_time_slot!]!

  # fetch aggregated fields from the table: "ch_time_slot"
  ch_time_slot_aggregate(
    # distinct select on columns
    distinct_on: [ch_time_slot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_slot_order_by!]

    # filter the rows returned
    where: ch_time_slot_bool_exp
  ): ch_time_slot_aggregate!

  # fetch data from the table: "ch_time_slot" using primary key columns
  ch_time_slot_by_pk(id: Int!): ch_time_slot

  # fetch data from the table: "ch_time_table"
  ch_time_table(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): [ch_time_table!]!

  # fetch aggregated fields from the table: "ch_time_table"
  ch_time_table_aggregate(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): ch_time_table_aggregate!

  # fetch data from the table: "ch_time_table" using primary key columns
  ch_time_table_by_pk(id: Int!): ch_time_table

  # fetch data from the table: "ch_wait_list"
  ch_wait_list(
    # distinct select on columns
    distinct_on: [ch_wait_list_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_wait_list_order_by!]

    # filter the rows returned
    where: ch_wait_list_bool_exp
  ): [ch_wait_list!]!

  # fetch aggregated fields from the table: "ch_wait_list"
  ch_wait_list_aggregate(
    # distinct select on columns
    distinct_on: [ch_wait_list_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_wait_list_order_by!]

    # filter the rows returned
    where: ch_wait_list_bool_exp
  ): ch_wait_list_aggregate!

  # fetch data from the table: "ch_wait_list" using primary key columns
  ch_wait_list_by_pk(id: Int!): ch_wait_list

  # fetch data from the table: "cr_user"
  cr_user(
    # distinct select on columns
    distinct_on: [cr_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cr_user_order_by!]

    # filter the rows returned
    where: cr_user_bool_exp
  ): [cr_user!]!

  # fetch aggregated fields from the table: "cr_user"
  cr_user_aggregate(
    # distinct select on columns
    distinct_on: [cr_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cr_user_order_by!]

    # filter the rows returned
    where: cr_user_bool_exp
  ): cr_user_aggregate!

  # fetch data from the table: "cr_user" using primary key columns
  cr_user_by_pk(uuid: uuid!): cr_user

  # fetch data from the table: "django_site"
  django_site(
    # distinct select on columns
    distinct_on: [django_site_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [django_site_order_by!]

    # filter the rows returned
    where: django_site_bool_exp
  ): [django_site!]!

  # fetch aggregated fields from the table: "django_site"
  django_site_aggregate(
    # distinct select on columns
    distinct_on: [django_site_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [django_site_order_by!]

    # filter the rows returned
    where: django_site_bool_exp
  ): django_site_aggregate!

  # fetch data from the table: "django_site" using primary key columns
  django_site_by_pk(id: Int!): django_site

  # fetch data from the table: "nb_guild"
  nb_guild(
    # distinct select on columns
    distinct_on: [nb_guild_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_order_by!]

    # filter the rows returned
    where: nb_guild_bool_exp
  ): [nb_guild!]!

  # fetch aggregated fields from the table: "nb_guild"
  nb_guild_aggregate(
    # distinct select on columns
    distinct_on: [nb_guild_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_order_by!]

    # filter the rows returned
    where: nb_guild_bool_exp
  ): nb_guild_aggregate!

  # fetch data from the table: "nb_guild" using primary key columns
  nb_guild_by_pk(id: Int!): nb_guild

  # fetch data from the table: "nb_guild_member"
  nb_guild_member(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): [nb_guild_member!]!

  # fetch aggregated fields from the table: "nb_guild_member"
  nb_guild_member_aggregate(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): nb_guild_member_aggregate!

  # fetch data from the table: "nb_guild_member" using primary key columns
  nb_guild_member_by_pk(id: Int!): nb_guild_member

  # fetch data from the table: "nb_meeting"
  nb_meeting(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): [nb_meeting!]!

  # fetch aggregated fields from the table: "nb_meeting"
  nb_meeting_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): nb_meeting_aggregate!

  # fetch data from the table: "nb_meeting" using primary key columns
  nb_meeting_by_pk(id: Int!): nb_meeting

  # fetch data from the table: "nb_meeting_participants"
  nb_meeting_participants(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): [nb_meeting_participants!]!

  # fetch aggregated fields from the table: "nb_meeting_participants"
  nb_meeting_participants_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): nb_meeting_participants_aggregate!

  # fetch data from the table: "nb_meeting_participants" using primary key columns
  nb_meeting_participants_by_pk(id: Int!): nb_meeting_participants

  # fetch data from the table: "nb_sphere"
  nb_sphere(
    # distinct select on columns
    distinct_on: [nb_sphere_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_order_by!]

    # filter the rows returned
    where: nb_sphere_bool_exp
  ): [nb_sphere!]!

  # fetch aggregated fields from the table: "nb_sphere"
  nb_sphere_aggregate(
    # distinct select on columns
    distinct_on: [nb_sphere_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_order_by!]

    # filter the rows returned
    where: nb_sphere_bool_exp
  ): nb_sphere_aggregate!

  # fetch data from the table: "nb_sphere" using primary key columns
  nb_sphere_by_pk(id: Int!): nb_sphere

  # fetch data from the table: "nb_sphere_managers"
  nb_sphere_managers(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): [nb_sphere_managers!]!

  # fetch aggregated fields from the table: "nb_sphere_managers"
  nb_sphere_managers_aggregate(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): nb_sphere_managers_aggregate!

  # fetch data from the table: "nb_sphere_managers" using primary key columns
  nb_sphere_managers_by_pk(id: Int!): nb_sphere_managers
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "ch_festival"
  ch_festival(
    # distinct select on columns
    distinct_on: [ch_festival_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_festival_order_by!]

    # filter the rows returned
    where: ch_festival_bool_exp
  ): [ch_festival!]!

  # fetch aggregated fields from the table: "ch_festival"
  ch_festival_aggregate(
    # distinct select on columns
    distinct_on: [ch_festival_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_festival_order_by!]

    # filter the rows returned
    where: ch_festival_bool_exp
  ): ch_festival_aggregate!

  # fetch data from the table: "ch_festival" using primary key columns
  ch_festival_by_pk(id: Int!): ch_festival

  # fetch data from the table: "ch_helper"
  ch_helper(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): [ch_helper!]!

  # fetch aggregated fields from the table: "ch_helper"
  ch_helper_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_order_by!]

    # filter the rows returned
    where: ch_helper_bool_exp
  ): ch_helper_aggregate!

  # fetch data from the table: "ch_helper" using primary key columns
  ch_helper_by_pk(id: Int!): ch_helper

  # fetch data from the table: "ch_helper_time_slots"
  ch_helper_time_slots(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): [ch_helper_time_slots!]!

  # fetch aggregated fields from the table: "ch_helper_time_slots"
  ch_helper_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_helper_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_helper_time_slots_order_by!]

    # filter the rows returned
    where: ch_helper_time_slots_bool_exp
  ): ch_helper_time_slots_aggregate!

  # fetch data from the table: "ch_helper_time_slots" using primary key columns
  ch_helper_time_slots_by_pk(id: Int!): ch_helper_time_slots

  # fetch data from the table: "ch_proposal"
  ch_proposal(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): [ch_proposal!]!

  # fetch aggregated fields from the table: "ch_proposal"
  ch_proposal_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_order_by!]

    # filter the rows returned
    where: ch_proposal_bool_exp
  ): ch_proposal_aggregate!

  # fetch data from the table: "ch_proposal" using primary key columns
  ch_proposal_by_pk(id: Int!): ch_proposal

  # fetch data from the table: "ch_proposal_time_slots"
  ch_proposal_time_slots(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): [ch_proposal_time_slots!]!

  # fetch aggregated fields from the table: "ch_proposal_time_slots"
  ch_proposal_time_slots_aggregate(
    # distinct select on columns
    distinct_on: [ch_proposal_time_slots_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_proposal_time_slots_order_by!]

    # filter the rows returned
    where: ch_proposal_time_slots_bool_exp
  ): ch_proposal_time_slots_aggregate!

  # fetch data from the table: "ch_proposal_time_slots" using primary key columns
  ch_proposal_time_slots_by_pk(id: Int!): ch_proposal_time_slots

  # fetch data from the table: "ch_room"
  ch_room(
    # distinct select on columns
    distinct_on: [ch_room_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_room_order_by!]

    # filter the rows returned
    where: ch_room_bool_exp
  ): [ch_room!]!

  # fetch aggregated fields from the table: "ch_room"
  ch_room_aggregate(
    # distinct select on columns
    distinct_on: [ch_room_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_room_order_by!]

    # filter the rows returned
    where: ch_room_bool_exp
  ): ch_room_aggregate!

  # fetch data from the table: "ch_room" using primary key columns
  ch_room_by_pk(id: Int!): ch_room

  # fetch data from the table: "ch_time_slot"
  ch_time_slot(
    # distinct select on columns
    distinct_on: [ch_time_slot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_slot_order_by!]

    # filter the rows returned
    where: ch_time_slot_bool_exp
  ): [ch_time_slot!]!

  # fetch aggregated fields from the table: "ch_time_slot"
  ch_time_slot_aggregate(
    # distinct select on columns
    distinct_on: [ch_time_slot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_slot_order_by!]

    # filter the rows returned
    where: ch_time_slot_bool_exp
  ): ch_time_slot_aggregate!

  # fetch data from the table: "ch_time_slot" using primary key columns
  ch_time_slot_by_pk(id: Int!): ch_time_slot

  # fetch data from the table: "ch_time_table"
  ch_time_table(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): [ch_time_table!]!

  # fetch aggregated fields from the table: "ch_time_table"
  ch_time_table_aggregate(
    # distinct select on columns
    distinct_on: [ch_time_table_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_time_table_order_by!]

    # filter the rows returned
    where: ch_time_table_bool_exp
  ): ch_time_table_aggregate!

  # fetch data from the table: "ch_time_table" using primary key columns
  ch_time_table_by_pk(id: Int!): ch_time_table

  # fetch data from the table: "ch_wait_list"
  ch_wait_list(
    # distinct select on columns
    distinct_on: [ch_wait_list_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_wait_list_order_by!]

    # filter the rows returned
    where: ch_wait_list_bool_exp
  ): [ch_wait_list!]!

  # fetch aggregated fields from the table: "ch_wait_list"
  ch_wait_list_aggregate(
    # distinct select on columns
    distinct_on: [ch_wait_list_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [ch_wait_list_order_by!]

    # filter the rows returned
    where: ch_wait_list_bool_exp
  ): ch_wait_list_aggregate!

  # fetch data from the table: "ch_wait_list" using primary key columns
  ch_wait_list_by_pk(id: Int!): ch_wait_list

  # fetch data from the table: "cr_user"
  cr_user(
    # distinct select on columns
    distinct_on: [cr_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cr_user_order_by!]

    # filter the rows returned
    where: cr_user_bool_exp
  ): [cr_user!]!

  # fetch aggregated fields from the table: "cr_user"
  cr_user_aggregate(
    # distinct select on columns
    distinct_on: [cr_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cr_user_order_by!]

    # filter the rows returned
    where: cr_user_bool_exp
  ): cr_user_aggregate!

  # fetch data from the table: "cr_user" using primary key columns
  cr_user_by_pk(uuid: uuid!): cr_user

  # fetch data from the table: "django_site"
  django_site(
    # distinct select on columns
    distinct_on: [django_site_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [django_site_order_by!]

    # filter the rows returned
    where: django_site_bool_exp
  ): [django_site!]!

  # fetch aggregated fields from the table: "django_site"
  django_site_aggregate(
    # distinct select on columns
    distinct_on: [django_site_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [django_site_order_by!]

    # filter the rows returned
    where: django_site_bool_exp
  ): django_site_aggregate!

  # fetch data from the table: "django_site" using primary key columns
  django_site_by_pk(id: Int!): django_site

  # fetch data from the table: "nb_guild"
  nb_guild(
    # distinct select on columns
    distinct_on: [nb_guild_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_order_by!]

    # filter the rows returned
    where: nb_guild_bool_exp
  ): [nb_guild!]!

  # fetch aggregated fields from the table: "nb_guild"
  nb_guild_aggregate(
    # distinct select on columns
    distinct_on: [nb_guild_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_order_by!]

    # filter the rows returned
    where: nb_guild_bool_exp
  ): nb_guild_aggregate!

  # fetch data from the table: "nb_guild" using primary key columns
  nb_guild_by_pk(id: Int!): nb_guild

  # fetch data from the table: "nb_guild_member"
  nb_guild_member(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): [nb_guild_member!]!

  # fetch aggregated fields from the table: "nb_guild_member"
  nb_guild_member_aggregate(
    # distinct select on columns
    distinct_on: [nb_guild_member_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_guild_member_order_by!]

    # filter the rows returned
    where: nb_guild_member_bool_exp
  ): nb_guild_member_aggregate!

  # fetch data from the table: "nb_guild_member" using primary key columns
  nb_guild_member_by_pk(id: Int!): nb_guild_member

  # fetch data from the table: "nb_meeting"
  nb_meeting(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): [nb_meeting!]!

  # fetch aggregated fields from the table: "nb_meeting"
  nb_meeting_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_order_by!]

    # filter the rows returned
    where: nb_meeting_bool_exp
  ): nb_meeting_aggregate!

  # fetch data from the table: "nb_meeting" using primary key columns
  nb_meeting_by_pk(id: Int!): nb_meeting

  # fetch data from the table: "nb_meeting_participants"
  nb_meeting_participants(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): [nb_meeting_participants!]!

  # fetch aggregated fields from the table: "nb_meeting_participants"
  nb_meeting_participants_aggregate(
    # distinct select on columns
    distinct_on: [nb_meeting_participants_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_meeting_participants_order_by!]

    # filter the rows returned
    where: nb_meeting_participants_bool_exp
  ): nb_meeting_participants_aggregate!

  # fetch data from the table: "nb_meeting_participants" using primary key columns
  nb_meeting_participants_by_pk(id: Int!): nb_meeting_participants

  # fetch data from the table: "nb_sphere"
  nb_sphere(
    # distinct select on columns
    distinct_on: [nb_sphere_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_order_by!]

    # filter the rows returned
    where: nb_sphere_bool_exp
  ): [nb_sphere!]!

  # fetch aggregated fields from the table: "nb_sphere"
  nb_sphere_aggregate(
    # distinct select on columns
    distinct_on: [nb_sphere_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_order_by!]

    # filter the rows returned
    where: nb_sphere_bool_exp
  ): nb_sphere_aggregate!

  # fetch data from the table: "nb_sphere" using primary key columns
  nb_sphere_by_pk(id: Int!): nb_sphere

  # fetch data from the table: "nb_sphere_managers"
  nb_sphere_managers(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): [nb_sphere_managers!]!

  # fetch aggregated fields from the table: "nb_sphere_managers"
  nb_sphere_managers_aggregate(
    # distinct select on columns
    distinct_on: [nb_sphere_managers_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [nb_sphere_managers_order_by!]

    # filter the rows returned
    where: nb_sphere_managers_bool_exp
  ): nb_sphere_managers_aggregate!

  # fetch data from the table: "nb_sphere_managers" using primary key columns
  nb_sphere_managers_by_pk(id: Int!): nb_sphere_managers
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
